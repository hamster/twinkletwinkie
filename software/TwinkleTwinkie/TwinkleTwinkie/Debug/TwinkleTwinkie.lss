
TwinkleTwinkie.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00803800  000019b2  00001a66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019a4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000e  000099a4  000019a4  00001a58  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000033  0080382e  0080382e  00001a94  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ac4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002c8  00000000  00000000  00001b08  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006c51  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000026e2  00000000  00000000  00008a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001898  00000000  00000000  0000b103  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000524  00000000  00000000  0000c99c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002b5a  00000000  00000000  0000cec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001232  00000000  00000000  0000fa1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001f8  00000000  00000000  00010c4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_6>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_8>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_10>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 b6 02 	jmp	0x56c	; 0x56c <__vector_20>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__vector_24>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e2 eb       	ldi	r30, 0xB2	; 178
      90:	f9 e1       	ldi	r31, 0x19	; 25
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	ae 32       	cpi	r26, 0x2E	; 46
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	28 e3       	ldi	r18, 0x38	; 56
      a0:	ae e2       	ldi	r26, 0x2E	; 46
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a1 36       	cpi	r26, 0x61	; 97
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 bd 00 	call	0x17a	; 0x17a <main>
      b2:	0c 94 d0 0c 	jmp	0x19a0	; 0x19a0 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_6>:

volatile uint8_t LED_PWM[3] = { 0 };
volatile uint16_t timeTicks = 0;

ISR(RTC_CNT_vect)
{
      ba:	1f 92       	push	r1
      bc:	0f 92       	push	r0
      be:	0f b6       	in	r0, 0x3f	; 63
      c0:	0f 92       	push	r0
      c2:	11 24       	eor	r1, r1
      c4:	2f 93       	push	r18
      c6:	3f 93       	push	r19
      c8:	4f 93       	push	r20
      ca:	5f 93       	push	r21
      cc:	6f 93       	push	r22
      ce:	7f 93       	push	r23
      d0:	8f 93       	push	r24
      d2:	9f 93       	push	r25
      d4:	af 93       	push	r26
      d6:	bf 93       	push	r27
      d8:	ef 93       	push	r30
      da:	ff 93       	push	r31

	/* Insert your RTC Compare interrupt handling code */
	touch_timer_handler();
      dc:	0e 94 95 02 	call	0x52a	; 0x52a <touch_timer_handler>

	/* Compare interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_CMP_bm;
      e0:	82 e0       	ldi	r24, 0x02	; 2
      e2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
}
      e6:	ff 91       	pop	r31
      e8:	ef 91       	pop	r30
      ea:	bf 91       	pop	r27
      ec:	af 91       	pop	r26
      ee:	9f 91       	pop	r25
      f0:	8f 91       	pop	r24
      f2:	7f 91       	pop	r23
      f4:	6f 91       	pop	r22
      f6:	5f 91       	pop	r21
      f8:	4f 91       	pop	r20
      fa:	3f 91       	pop	r19
      fc:	2f 91       	pop	r18
      fe:	0f 90       	pop	r0
     100:	0f be       	out	0x3f, r0	; 63
     102:	0f 90       	pop	r0
     104:	1f 90       	pop	r1
     106:	18 95       	reti

00000108 <__vector_8>:

ISR(TCA0_OVF_vect){
     108:	1f 92       	push	r1
     10a:	0f 92       	push	r0
     10c:	0f b6       	in	r0, 0x3f	; 63
     10e:	0f 92       	push	r0
     110:	11 24       	eor	r1, r1
     112:	8f 93       	push	r24
     114:	9f 93       	push	r25
	
	static uint8_t counter = 0;

	if(counter == 0){
     116:	80 91 2e 38 	lds	r24, 0x382E	; 0x80382e <__data_end>
     11a:	81 11       	cpse	r24, r1
     11c:	03 c0       	rjmp	.+6      	; 0x124 <__vector_8+0x1c>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     11e:	2a 9a       	sbi	0x05, 2	; 5
     120:	29 9a       	sbi	0x05, 1	; 5
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     122:	4b 9a       	sbi	0x09, 3	; 9
		LED2_set_level(true);
		LED3_set_level(true);
	}

	// Determine if each LED needs to turn off
	if(LED_PWM[0] <= counter){
     124:	90 91 2f 38 	lds	r25, 0x382F	; 0x80382f <LED_PWM>
     128:	89 17       	cp	r24, r25
     12a:	08 f0       	brcs	.+2      	; 0x12e <__vector_8+0x26>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     12c:	2a 98       	cbi	0x05, 2	; 5
		LED1_set_level(false);
	}
	if(LED_PWM[1] <= counter){
     12e:	90 91 30 38 	lds	r25, 0x3830	; 0x803830 <LED_PWM+0x1>
     132:	89 17       	cp	r24, r25
     134:	08 f0       	brcs	.+2      	; 0x138 <__vector_8+0x30>
     136:	29 98       	cbi	0x05, 1	; 5
		LED2_set_level(false);
	}
	if(LED_PWM[2] <= counter){
     138:	90 91 31 38 	lds	r25, 0x3831	; 0x803831 <LED_PWM+0x2>
     13c:	89 17       	cp	r24, r25
     13e:	08 f0       	brcs	.+2      	; 0x142 <__vector_8+0x3a>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     140:	4b 98       	cbi	0x09, 3	; 9
		LED3_set_level(false);
	}
	
	counter++;
     142:	8f 5f       	subi	r24, 0xFF	; 255
     144:	80 93 2e 38 	sts	0x382E, r24	; 0x80382e <__data_end>

	/* The interrupt flag has to be cleared manually */
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
}
     14e:	9f 91       	pop	r25
     150:	8f 91       	pop	r24
     152:	0f 90       	pop	r0
     154:	0f be       	out	0x3f, r0	; 63
     156:	0f 90       	pop	r0
     158:	1f 90       	pop	r1
     15a:	18 95       	reti

0000015c <__vector_10>:

ISR(TCA0_CMP0_vect){
     15c:	1f 92       	push	r1
     15e:	0f 92       	push	r0
     160:	0f b6       	in	r0, 0x3f	; 63
     162:	0f 92       	push	r0
     164:	11 24       	eor	r1, r1
     166:	8f 93       	push	r24

	/* The interrupt flag has to be cleared manually */
	TCA0.SINGLE.INTFLAGS = TCA_SINGLE_CMP0_bm;
     168:	80 e1       	ldi	r24, 0x10	; 16
     16a:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <__TEXT_REGION_LENGTH__+0x700a0b>
}
     16e:	8f 91       	pop	r24
     170:	0f 90       	pop	r0
     172:	0f be       	out	0x3f, r0	; 63
     174:	0f 90       	pop	r0
     176:	1f 90       	pop	r1
     178:	18 95       	reti

0000017a <main>:
	MODE_CYLON
} RUNMODE;

int main(void){
	
	system_init();
     17a:	0e 94 2f 03 	call	0x65e	; 0x65e <system_init>
	touch_init();
     17e:	0e 94 39 02 	call	0x472	; 0x472 <touch_init>
	
	cpu_irq_enable(); /* Global Interrupt Enable */
     182:	78 94       	sei
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
     184:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     186:	2f e7       	ldi	r18, 0x7F	; 127
     188:	8a e1       	ldi	r24, 0x1A	; 26
     18a:	96 e0       	ldi	r25, 0x06	; 6
     18c:	21 50       	subi	r18, 0x01	; 1
     18e:	80 40       	sbci	r24, 0x00	; 0
     190:	90 40       	sbci	r25, 0x00	; 0
     192:	e1 f7       	brne	.-8      	; 0x18c <main+0x12>
     194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x1c>
     196:	00 00       	nop
     198:	29 9a       	sbi	0x05, 1	; 5
     19a:	2f e7       	ldi	r18, 0x7F	; 127
     19c:	8a e1       	ldi	r24, 0x1A	; 26
     19e:	96 e0       	ldi	r25, 0x06	; 6
     1a0:	21 50       	subi	r18, 0x01	; 1
     1a2:	80 40       	sbci	r24, 0x00	; 0
     1a4:	90 40       	sbci	r25, 0x00	; 0
     1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x26>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x30>
     1aa:	00 00       	nop
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
     1ac:	4b 9a       	sbi	0x09, 3	; 9
     1ae:	2f e7       	ldi	r18, 0x7F	; 127
     1b0:	8a e1       	ldi	r24, 0x1A	; 26
     1b2:	96 e0       	ldi	r25, 0x06	; 6
     1b4:	21 50       	subi	r18, 0x01	; 1
     1b6:	80 40       	sbci	r24, 0x00	; 0
     1b8:	90 40       	sbci	r25, 0x00	; 0
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x3a>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x44>
     1be:	00 00       	nop
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     1c0:	2a 98       	cbi	0x05, 2	; 5
     1c2:	2f e7       	ldi	r18, 0x7F	; 127
     1c4:	8a e1       	ldi	r24, 0x1A	; 26
     1c6:	96 e0       	ldi	r25, 0x06	; 6
     1c8:	21 50       	subi	r18, 0x01	; 1
     1ca:	80 40       	sbci	r24, 0x00	; 0
     1cc:	90 40       	sbci	r25, 0x00	; 0
     1ce:	e1 f7       	brne	.-8      	; 0x1c8 <main+0x4e>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0x58>
     1d2:	00 00       	nop
     1d4:	29 98       	cbi	0x05, 1	; 5
     1d6:	2f e7       	ldi	r18, 0x7F	; 127
     1d8:	8a e1       	ldi	r24, 0x1A	; 26
     1da:	96 e0       	ldi	r25, 0x06	; 6
     1dc:	21 50       	subi	r18, 0x01	; 1
     1de:	80 40       	sbci	r24, 0x00	; 0
     1e0:	90 40       	sbci	r25, 0x00	; 0
     1e2:	e1 f7       	brne	.-8      	; 0x1dc <main+0x62>
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0x6c>
     1e6:	00 00       	nop
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     1e8:	4b 98       	cbi	0x09, 3	; 9
     1ea:	2f e7       	ldi	r18, 0x7F	; 127
     1ec:	8a e1       	ldi	r24, 0x1A	; 26
     1ee:	96 e0       	ldi	r25, 0x06	; 6
     1f0:	21 50       	subi	r18, 0x01	; 1
     1f2:	80 40       	sbci	r24, 0x00	; 0
     1f4:	90 40       	sbci	r25, 0x00	; 0
     1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x76>
     1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x80>
     1fa:	00 00       	nop
	LED2_set_level(false);
	_delay_ms(100);
	LED3_set_level(false);
	_delay_ms(100);
	
	TIMER_0_init();
     1fc:	0e 94 22 04 	call	0x844	; 0x844 <TIMER_0_init>
	
	LED_PWM[0] = 14;
     200:	ef e2       	ldi	r30, 0x2F	; 47
     202:	f8 e3       	ldi	r31, 0x38	; 56
     204:	8e e0       	ldi	r24, 0x0E	; 14
     206:	80 83       	st	Z, r24
	LED_PWM[1] = 14;
     208:	81 83       	std	Z+1, r24	; 0x01
	LED_PWM[2] = 14;
     20a:	82 83       	std	Z+2, r24	; 0x02
	RUNMODE mode = MODE_TWINKLE;
	
	bool touched = false;
	bool changed = false;
	uint8_t twinkleLED = 0;
	uint8_t delay = 0;
     20c:	00 e0       	ldi	r16, 0x00	; 0
	
	RUNMODE mode = MODE_TWINKLE;
	
	bool touched = false;
	bool changed = false;
	uint8_t twinkleLED = 0;
     20e:	31 2c       	mov	r3, r1
	uint8_t step = 0;
	
	RUNMODE mode = MODE_TWINKLE;
	
	bool touched = false;
	bool changed = false;
     210:	91 2c       	mov	r9, r1
	
	uint8_t step = 0;
	
	RUNMODE mode = MODE_TWINKLE;
	
	bool touched = false;
     212:	10 e0       	ldi	r17, 0x00	; 0
	bool directionUp = true;
	bool twinkling = false;
	
	uint8_t step = 0;
	
	RUNMODE mode = MODE_TWINKLE;
     214:	e1 2c       	mov	r14, r1
	
	uint8_t brightnessPosition = 0;
	bool directionUp = true;
	bool twinkling = false;
	
	uint8_t step = 0;
     216:	51 2c       	mov	r5, r1
	LED_PWM[1] = 14;
	LED_PWM[2] = 14;
	
	uint8_t brightnessPosition = 0;
	bool directionUp = true;
	bool twinkling = false;
     218:	71 2c       	mov	r7, r1
	LED_PWM[0] = 14;
	LED_PWM[1] = 14;
	LED_PWM[2] = 14;
	
	uint8_t brightnessPosition = 0;
	bool directionUp = true;
     21a:	44 24       	eor	r4, r4
     21c:	43 94       	inc	r4
	
	LED_PWM[0] = 14;
	LED_PWM[1] = 14;
	LED_PWM[2] = 14;
	
	uint8_t brightnessPosition = 0;
     21e:	61 2c       	mov	r6, r1
						// Go down in brightness
						LED_PWM[twinkleLED] = pwm_log[--brightnessPosition];
						if(brightnessPosition == 0){
							directionUp = true;
							twinkling = false;
							LED_PWM[0] = 14;
     220:	ef 01       	movw	r28, r30
     222:	0f 2e       	mov	r0, r31
     224:	fe e0       	ldi	r31, 0x0E	; 14
     226:	8f 2e       	mov	r8, r31
     228:	f0 2d       	mov	r31, r0
			}
			
		}
		else{
			// Mode is about to change, light up all the LEDs
			LED_PWM[0] = 184;
     22a:	0f 2e       	mov	r0, r31
     22c:	f8 eb       	ldi	r31, 0xB8	; 184
     22e:	ff 2e       	mov	r15, r31
     230:	f0 2d       	mov	r31, r0
							LED_PWM[2] = 14;
							step = 1;
							break;
						case 1:
							LED_PWM[0] = 14;
							LED_PWM[1] = 196;
     232:	0f 2e       	mov	r0, r31
     234:	f4 ec       	ldi	r31, 0xC4	; 196
     236:	2f 2e       	mov	r2, r31
     238:	f0 2d       	mov	r31, r0
				}
			}
			
			if(mode == MODE_RANDOM){
				if(delay == 0){
					LED_PWM[0] = rand() % 196;
     23a:	0f 2e       	mov	r0, r31
     23c:	f4 ec       	ldi	r31, 0xC4	; 196
     23e:	cf 2e       	mov	r12, r31
     240:	d1 2c       	mov	r13, r1
     242:	f0 2d       	mov	r31, r0
			}
			
			if(mode == MODE_TWINKLE){
				if(!twinkling){
					// Not twinkling, wait a random time before starting a twinkle
					if((rand() % 50) == 0){
     244:	0f 2e       	mov	r0, r31
     246:	f2 e3       	ldi	r31, 0x32	; 50
     248:	af 2e       	mov	r10, r31
     24a:	b1 2c       	mov	r11, r1
     24c:	f0 2d       	mov	r31, r0
	

	/* Replace with your application code */
	while (1) {
		
		touch_process();
     24e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <touch_process>
		if (measurement_done_touch == 1) {
     252:	80 91 33 38 	lds	r24, 0x3833	; 0x803833 <measurement_done_touch>
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	d9 f4       	brne	.+54     	; 0x290 <main+0x116>
			if((get_sensor_state(0) & KEY_TOUCHED_MASK) != 0) {
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	0e 94 a7 02 	call	0x54e	; 0x54e <get_sensor_state>
     262:	88 23       	and	r24, r24
     264:	0c f4       	brge	.+2      	; 0x268 <main+0xee>
     266:	c2 c0       	rjmp	.+388    	; 0x3ec <main+0x272>
				touched = true;
				} else {
				if(touched){
     268:	11 23       	and	r17, r17
     26a:	a1 f0       	breq	.+40     	; 0x294 <main+0x11a>
					switch(mode){
     26c:	21 e0       	ldi	r18, 0x01	; 1
     26e:	e2 16       	cp	r14, r18
     270:	41 f0       	breq	.+16     	; 0x282 <main+0x108>
     272:	e2 16       	cp	r14, r18
     274:	08 f4       	brcc	.+2      	; 0x278 <main+0xfe>
     276:	cc c0       	rjmp	.+408    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     278:	82 e0       	ldi	r24, 0x02	; 2
     27a:	e8 16       	cp	r14, r24
     27c:	09 f4       	brne	.+2      	; 0x280 <main+0x106>
     27e:	cb c0       	rjmp	.+406    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     280:	04 c0       	rjmp	.+8      	; 0x28a <main+0x110>
						case MODE_TWINKLE:
							mode = MODE_RANDOM;
							break;
						case MODE_RANDOM:
							mode = MODE_CYLON;
     282:	68 94       	set
     284:	ee 24       	eor	r14, r14
     286:	e1 f8       	bld	r14, 1
     288:	07 c0       	rjmp	.+14     	; 0x298 <main+0x11e>
						case MODE_CYLON:
							mode = MODE_TWINKLE;
							break;
					}
					touched = false;
					changed = true;
     28a:	99 24       	eor	r9, r9
     28c:	93 94       	inc	r9
							break;
						case MODE_CYLON:
							mode = MODE_TWINKLE;
							break;
					}
					touched = false;
     28e:	10 e0       	ldi	r17, 0x00	; 0
					changed = true;
				}
			}
		}
		
		if(!touched){
     290:	11 11       	cpse	r17, r1
     292:	ac c0       	rjmp	.+344    	; 0x3ec <main+0x272>
			if(changed){
     294:	99 20       	and	r9, r9
     296:	31 f0       	breq	.+12     	; 0x2a4 <main+0x12a>
				// Mode is changing
				LED_PWM[0] = 14;
     298:	88 82       	st	Y, r8
				LED_PWM[1] = 14;
     29a:	89 82       	std	Y+1, r8	; 0x01
				LED_PWM[2] = 14;
     29c:	8a 82       	std	Y+2, r8	; 0x02
				delay = 0;
				
				changed = false;
			}
			
			if(mode == MODE_TWINKLE){
     29e:	e1 10       	cpse	r14, r1
     2a0:	ce c0       	rjmp	.+412    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     2a2:	05 c0       	rjmp	.+10     	; 0x2ae <main+0x134>
     2a4:	e1 10       	cpse	r14, r1
     2a6:	47 c0       	rjmp	.+142    	; 0x336 <main+0x1bc>
				if(!twinkling){
     2a8:	71 10       	cpse	r7, r1
     2aa:	b7 c0       	rjmp	.+366    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <main+0x13e>
				
				brightnessPosition = 0;
				directionUp = true;
				twinkling = false;
				step = 0;
				delay = 0;
     2ae:	00 e0       	ldi	r16, 0x00	; 0
				LED_PWM[2] = 14;
				
				brightnessPosition = 0;
				directionUp = true;
				twinkling = false;
				step = 0;
     2b0:	51 2c       	mov	r5, r1
				LED_PWM[0] = 14;
				LED_PWM[1] = 14;
				LED_PWM[2] = 14;
				
				brightnessPosition = 0;
				directionUp = true;
     2b2:	44 24       	eor	r4, r4
     2b4:	43 94       	inc	r4
				// Mode is changing
				LED_PWM[0] = 14;
				LED_PWM[1] = 14;
				LED_PWM[2] = 14;
				
				brightnessPosition = 0;
     2b6:	61 2c       	mov	r6, r1
			}
			
			if(mode == MODE_TWINKLE){
				if(!twinkling){
					// Not twinkling, wait a random time before starting a twinkle
					if((rand() % 50) == 0){
     2b8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <rand>
     2bc:	b5 01       	movw	r22, r10
     2be:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__divmodhi4>
     2c2:	89 2b       	or	r24, r25
     2c4:	a9 f5       	brne	.+106    	; 0x330 <main+0x1b6>
						// Time to twinkle
						twinkling = true;
						twinkleLED = rand() % 3;
     2c6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <rand>
     2ca:	63 e0       	ldi	r22, 0x03	; 3
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__divmodhi4>
     2d2:	38 2e       	mov	r3, r24
     2d4:	a2 c0       	rjmp	.+324    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
					}
				}
				
				if(delay == 0 && twinkling){
					if(directionUp){
     2d6:	44 20       	and	r4, r4
     2d8:	b1 f0       	breq	.+44     	; 0x306 <main+0x18c>
						// Go up in brightness
						LED_PWM[twinkleLED] = pwm_log[brightnessPosition++];
     2da:	e3 2d       	mov	r30, r3
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	86 0d       	add	r24, r6
     2e2:	a6 2d       	mov	r26, r6
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	ac 55       	subi	r26, 0x5C	; 92
     2e8:	b6 46       	sbci	r27, 0x66	; 102
     2ea:	9c 91       	ld	r25, X
     2ec:	e1 5d       	subi	r30, 0xD1	; 209
     2ee:	f7 4c       	sbci	r31, 0xC7	; 199
     2f0:	90 83       	st	Z, r25
						if(brightnessPosition == 6){
     2f2:	44 24       	eor	r4, r4
     2f4:	43 94       	inc	r4
     2f6:	86 30       	cpi	r24, 0x06	; 6
     2f8:	09 f4       	brne	.+2      	; 0x2fc <main+0x182>
     2fa:	41 2c       	mov	r4, r1
				}
				
				if(delay == 0 && twinkling){
					if(directionUp){
						// Go up in brightness
						LED_PWM[twinkleLED] = pwm_log[brightnessPosition++];
     2fc:	68 2e       	mov	r6, r24
							LED_PWM[0] = 14;
							LED_PWM[1] = 14;
							LED_PWM[2] = 14;
						}
					}
					delay = delayTop;
     2fe:	04 e6       	ldi	r16, 0x64	; 100
     300:	77 24       	eor	r7, r7
     302:	73 94       	inc	r7
     304:	93 c0       	rjmp	.+294    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
							directionUp = false;
						}
					}
					else{
						// Go down in brightness
						LED_PWM[twinkleLED] = pwm_log[--brightnessPosition];
     306:	e3 2d       	mov	r30, r3
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	6a 94       	dec	r6
     30c:	a6 2d       	mov	r26, r6
     30e:	b0 e0       	ldi	r27, 0x00	; 0
     310:	ac 55       	subi	r26, 0x5C	; 92
     312:	b6 46       	sbci	r27, 0x66	; 102
     314:	8c 91       	ld	r24, X
     316:	e1 5d       	subi	r30, 0xD1	; 209
     318:	f7 4c       	sbci	r31, 0xC7	; 199
     31a:	80 83       	st	Z, r24
						if(brightnessPosition == 0){
     31c:	61 10       	cpse	r6, r1
     31e:	83 c0       	rjmp	.+262    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
							directionUp = true;
							twinkling = false;
							LED_PWM[0] = 14;
     320:	88 82       	st	Y, r8
							LED_PWM[1] = 14;
     322:	89 82       	std	Y+1, r8	; 0x01
							LED_PWM[2] = 14;
     324:	8a 82       	std	Y+2, r8	; 0x02
						}
					}
					delay = delayTop;
     326:	04 e6       	ldi	r16, 0x64	; 100
					else{
						// Go down in brightness
						LED_PWM[twinkleLED] = pwm_log[--brightnessPosition];
						if(brightnessPosition == 0){
							directionUp = true;
							twinkling = false;
     328:	71 2c       	mov	r7, r1
					}
					else{
						// Go down in brightness
						LED_PWM[twinkleLED] = pwm_log[--brightnessPosition];
						if(brightnessPosition == 0){
							directionUp = true;
     32a:	44 24       	eor	r4, r4
     32c:	43 94       	inc	r4
     32e:	7e c0       	rjmp	.+252    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     330:	71 2c       	mov	r7, r1
						}
					}
					delay = delayTop;
				}
				else{
					delay -= 5;
     332:	05 50       	subi	r16, 0x05	; 5
     334:	7b c0       	rjmp	.+246    	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
				}
			}
			
			if(mode == MODE_RANDOM){
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	e9 12       	cpse	r14, r25
     33a:	1e c0       	rjmp	.+60     	; 0x378 <main+0x1fe>
				if(delay == 0){
     33c:	01 11       	cpse	r16, r1
     33e:	1a c0       	rjmp	.+52     	; 0x374 <main+0x1fa>
     340:	05 c0       	rjmp	.+10     	; 0x34c <main+0x1d2>
				LED_PWM[2] = 14;
				
				brightnessPosition = 0;
				directionUp = true;
				twinkling = false;
				step = 0;
     342:	51 2c       	mov	r5, r1
				LED_PWM[1] = 14;
				LED_PWM[2] = 14;
				
				brightnessPosition = 0;
				directionUp = true;
				twinkling = false;
     344:	71 2c       	mov	r7, r1
				LED_PWM[0] = 14;
				LED_PWM[1] = 14;
				LED_PWM[2] = 14;
				
				brightnessPosition = 0;
				directionUp = true;
     346:	44 24       	eor	r4, r4
     348:	43 94       	inc	r4
				// Mode is changing
				LED_PWM[0] = 14;
				LED_PWM[1] = 14;
				LED_PWM[2] = 14;
				
				brightnessPosition = 0;
     34a:	61 2c       	mov	r6, r1
				}
			}
			
			if(mode == MODE_RANDOM){
				if(delay == 0){
					LED_PWM[0] = rand() % 196;
     34c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <rand>
     350:	b6 01       	movw	r22, r12
     352:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__divmodhi4>
     356:	88 83       	st	Y, r24
					LED_PWM[1] = rand() % 196;
     358:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <rand>
     35c:	b6 01       	movw	r22, r12
     35e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__divmodhi4>
     362:	89 83       	std	Y+1, r24	; 0x01
					LED_PWM[2] = rand() % 196;
     364:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <rand>
     368:	b6 01       	movw	r22, r12
     36a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <__divmodhi4>
     36e:	8a 83       	std	Y+2, r24	; 0x02
					delay = delayTop;
     370:	04 e6       	ldi	r16, 0x64	; 100
     372:	60 c0       	rjmp	.+192    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				}
				else{
					delay--;
     374:	01 50       	subi	r16, 0x01	; 1
     376:	5e c0       	rjmp	.+188    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
				}
			}
			
			if(mode == MODE_CYLON){
     378:	22 e0       	ldi	r18, 0x02	; 2
     37a:	e2 12       	cpse	r14, r18
     37c:	3c c0       	rjmp	.+120    	; 0x3f6 <main+0x27c>
				if(delay == 0){
     37e:	01 11       	cpse	r16, r1
     380:	31 c0       	rjmp	.+98     	; 0x3e4 <main+0x26a>
					switch(step){
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	58 16       	cp	r5, r24
     386:	89 f0       	breq	.+34     	; 0x3aa <main+0x230>
     388:	58 16       	cp	r5, r24
     38a:	30 f0       	brcs	.+12     	; 0x398 <main+0x21e>
     38c:	52 16       	cp	r5, r18
     38e:	b9 f0       	breq	.+46     	; 0x3be <main+0x244>
     390:	93 e0       	ldi	r25, 0x03	; 3
     392:	59 16       	cp	r5, r25
     394:	f9 f0       	breq	.+62     	; 0x3d4 <main+0x25a>
     396:	32 c0       	rjmp	.+100    	; 0x3fc <main+0x282>
						case 0:
							LED_PWM[0] = 196;
     398:	28 82       	st	Y, r2
							LED_PWM[1] = 14;
     39a:	89 82       	std	Y+1, r8	; 0x01
							LED_PWM[2] = 14;
     39c:	8a 82       	std	Y+2, r8	; 0x02
							step = 1;
							break;
     39e:	10 e0       	ldi	r17, 0x00	; 0
							LED_PWM[1] = 196;
							LED_PWM[2] = 14;
							step = 0;
							break;
					}
					delay = delayTop;
     3a0:	04 e6       	ldi	r16, 0x64	; 100
						case 0:
							LED_PWM[0] = 196;
							LED_PWM[1] = 14;
							LED_PWM[2] = 14;
							step = 1;
							break;
     3a2:	91 2c       	mov	r9, r1
					switch(step){
						case 0:
							LED_PWM[0] = 196;
							LED_PWM[1] = 14;
							LED_PWM[2] = 14;
							step = 1;
     3a4:	55 24       	eor	r5, r5
     3a6:	53 94       	inc	r5
							break;
     3a8:	2c c0       	rjmp	.+88     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
						case 1:
							LED_PWM[0] = 14;
     3aa:	88 82       	st	Y, r8
							LED_PWM[1] = 196;
     3ac:	29 82       	std	Y+1, r2	; 0x01
							LED_PWM[2] = 14;
     3ae:	8a 82       	std	Y+2, r8	; 0x02
							step = 2;
							break;
     3b0:	10 e0       	ldi	r17, 0x00	; 0
							LED_PWM[1] = 196;
							LED_PWM[2] = 14;
							step = 0;
							break;
					}
					delay = delayTop;
     3b2:	04 e6       	ldi	r16, 0x64	; 100
						case 1:
							LED_PWM[0] = 14;
							LED_PWM[1] = 196;
							LED_PWM[2] = 14;
							step = 2;
							break;
     3b4:	91 2c       	mov	r9, r1
							break;
						case 1:
							LED_PWM[0] = 14;
							LED_PWM[1] = 196;
							LED_PWM[2] = 14;
							step = 2;
     3b6:	68 94       	set
     3b8:	55 24       	eor	r5, r5
     3ba:	51 f8       	bld	r5, 1
							break;
     3bc:	22 c0       	rjmp	.+68     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
						case 2:
							LED_PWM[0] = 14;
     3be:	88 82       	st	Y, r8
							LED_PWM[1] = 14;
     3c0:	89 82       	std	Y+1, r8	; 0x01
							LED_PWM[2] = 196;
     3c2:	2a 82       	std	Y+2, r2	; 0x02
							step = 3;
							break;
     3c4:	10 e0       	ldi	r17, 0x00	; 0
							LED_PWM[1] = 196;
							LED_PWM[2] = 14;
							step = 0;
							break;
					}
					delay = delayTop;
     3c6:	04 e6       	ldi	r16, 0x64	; 100
						case 2:
							LED_PWM[0] = 14;
							LED_PWM[1] = 14;
							LED_PWM[2] = 196;
							step = 3;
							break;
     3c8:	91 2c       	mov	r9, r1
							break;
						case 2:
							LED_PWM[0] = 14;
							LED_PWM[1] = 14;
							LED_PWM[2] = 196;
							step = 3;
     3ca:	0f 2e       	mov	r0, r31
     3cc:	f3 e0       	ldi	r31, 0x03	; 3
     3ce:	5f 2e       	mov	r5, r31
     3d0:	f0 2d       	mov	r31, r0
							break;
     3d2:	17 c0       	rjmp	.+46     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
						case 3:
							LED_PWM[0] = 14;
     3d4:	88 82       	st	Y, r8
							LED_PWM[1] = 196;
     3d6:	29 82       	std	Y+1, r2	; 0x01
							LED_PWM[2] = 14;
     3d8:	8a 82       	std	Y+2, r8	; 0x02
							step = 0;
							break;
     3da:	10 e0       	ldi	r17, 0x00	; 0
					}
					delay = delayTop;
     3dc:	04 e6       	ldi	r16, 0x64	; 100
						case 3:
							LED_PWM[0] = 14;
							LED_PWM[1] = 196;
							LED_PWM[2] = 14;
							step = 0;
							break;
     3de:	91 2c       	mov	r9, r1
							break;
						case 3:
							LED_PWM[0] = 14;
							LED_PWM[1] = 196;
							LED_PWM[2] = 14;
							step = 0;
     3e0:	51 2c       	mov	r5, r1
							break;
     3e2:	0f c0       	rjmp	.+30     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
					}
					delay = delayTop;
				}
				else{
					delay--;
     3e4:	01 50       	subi	r16, 0x01	; 1
     3e6:	10 e0       	ldi	r17, 0x00	; 0
     3e8:	91 2c       	mov	r9, r1
     3ea:	0b c0       	rjmp	.+22     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
			}
			
		}
		else{
			// Mode is about to change, light up all the LEDs
			LED_PWM[0] = 184;
     3ec:	f8 82       	st	Y, r15
			LED_PWM[1] = 184;
     3ee:	f9 82       	std	Y+1, r15	; 0x01
			LED_PWM[2] = 184;
     3f0:	fa 82       	std	Y+2, r15	; 0x02
     3f2:	11 e0       	ldi	r17, 0x01	; 1
     3f4:	06 c0       	rjmp	.+12     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3f6:	10 e0       	ldi	r17, 0x00	; 0
     3f8:	91 2c       	mov	r9, r1
     3fa:	03 c0       	rjmp	.+6      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
				}
			}
			
			if(mode == MODE_CYLON){
				if(delay == 0){
					switch(step){
     3fc:	10 e0       	ldi	r17, 0x00	; 0
							LED_PWM[1] = 196;
							LED_PWM[2] = 14;
							step = 0;
							break;
					}
					delay = delayTop;
     3fe:	04 e6       	ldi	r16, 0x64	; 100
				}
			}
			
			if(mode == MODE_CYLON){
				if(delay == 0){
					switch(step){
     400:	91 2c       	mov	r9, r1
     402:	87 e8       	ldi	r24, 0x87	; 135
     404:	93 e1       	ldi	r25, 0x13	; 19
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     40a:	00 c0       	rjmp	.+0      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40c:	00 00       	nop
     40e:	1f cf       	rjmp	.-450    	; 0x24e <main+0xd4>
				touched = true;
				} else {
				if(touched){
					switch(mode){
						case MODE_TWINKLE:
							mode = MODE_RANDOM;
     410:	ee 24       	eor	r14, r14
     412:	e3 94       	inc	r14
     414:	41 cf       	rjmp	.-382    	; 0x298 <main+0x11e>
							break;
						case MODE_RANDOM:
							mode = MODE_CYLON;
							break;
						case MODE_CYLON:
							mode = MODE_TWINKLE;
     416:	e1 2c       	mov	r14, r1
     418:	3f cf       	rjmp	.-386    	; 0x298 <main+0x11e>
						twinkling = true;
						twinkleLED = rand() % 3;
					}
				}
				
				if(delay == 0 && twinkling){
     41a:	00 23       	and	r16, r16
     41c:	09 f4       	brne	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41e:	5b cf       	rjmp	.-330    	; 0x2d6 <main+0x15c>
     420:	77 24       	eor	r7, r7
     422:	73 94       	inc	r7
     424:	86 cf       	rjmp	.-244    	; 0x332 <main+0x1b8>
							LED_PWM[0] = 14;
							LED_PWM[1] = 14;
							LED_PWM[2] = 14;
						}
					}
					delay = delayTop;
     426:	04 e6       	ldi	r16, 0x64	; 100
     428:	77 24       	eor	r7, r7
     42a:	73 94       	inc	r7
							break;
						case 1:
							LED_PWM[0] = 14;
							LED_PWM[1] = 196;
							LED_PWM[2] = 14;
							step = 2;
     42c:	10 e0       	ldi	r17, 0x00	; 0
     42e:	e1 2c       	mov	r14, r1
     430:	91 2c       	mov	r9, r1
     432:	e7 cf       	rjmp	.-50     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     434:	10 e0       	ldi	r17, 0x00	; 0
     436:	ee 24       	eor	r14, r14
     438:	e3 94       	inc	r14
     43a:	91 2c       	mov	r9, r1
     43c:	e2 cf       	rjmp	.-60     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
				else{
					delay -= 5;
				}
			}
			
			if(mode == MODE_RANDOM){
     43e:	91 e0       	ldi	r25, 0x01	; 1
     440:	e9 16       	cp	r14, r25
     442:	09 f4       	brne	.+2      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     444:	7e cf       	rjmp	.-260    	; 0x342 <main+0x1c8>
				LED_PWM[2] = 14;
				
				brightnessPosition = 0;
				directionUp = true;
				twinkling = false;
				step = 0;
     446:	51 2c       	mov	r5, r1
				LED_PWM[1] = 14;
				LED_PWM[2] = 14;
				
				brightnessPosition = 0;
				directionUp = true;
				twinkling = false;
     448:	71 2c       	mov	r7, r1
				LED_PWM[0] = 14;
				LED_PWM[1] = 14;
				LED_PWM[2] = 14;
				
				brightnessPosition = 0;
				directionUp = true;
     44a:	44 24       	eor	r4, r4
     44c:	43 94       	inc	r4
				// Mode is changing
				LED_PWM[0] = 14;
				LED_PWM[1] = 14;
				LED_PWM[2] = 14;
				
				brightnessPosition = 0;
     44e:	61 2c       	mov	r6, r1
				directionUp = true;
				twinkling = false;
				step = 0;
				delay = 0;
     450:	00 e0       	ldi	r16, 0x00	; 0
     452:	92 cf       	rjmp	.-220    	; 0x378 <main+0x1fe>

00000454 <qtm_measure_complete_callback>:
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
}
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	80 93 34 38 	sts	0x3834, r24	; 0x803834 <touch_postprocess_request>
     45a:	08 95       	ret

0000045c <Timer_set_period>:
     45c:	e0 e4       	ldi	r30, 0x40	; 64
     45e:	f1 e0       	ldi	r31, 0x01	; 1
     460:	91 81       	ldd	r25, Z+1	; 0x01
     462:	92 fd       	sbrc	r25, 2
     464:	fd cf       	rjmp	.-6      	; 0x460 <Timer_set_period+0x4>
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <__TEXT_REGION_LENGTH__+0x70014a>
     46c:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <__TEXT_REGION_LENGTH__+0x70014b>
     470:	08 95       	ret

00000472 <touch_init>:
     472:	80 e2       	ldi	r24, 0x20	; 32
     474:	0e 94 2e 02 	call	0x45c	; 0x45c <Timer_set_period>
     478:	e4 e1       	ldi	r30, 0x14	; 20
     47a:	f4 e0       	ldi	r31, 0x04	; 4
     47c:	80 81       	ld	r24, Z
     47e:	87 7f       	andi	r24, 0xF7	; 247
     480:	80 83       	st	Z, r24
     482:	80 81       	ld	r24, Z
     484:	88 7f       	andi	r24, 0xF8	; 248
     486:	84 60       	ori	r24, 0x04	; 4
     488:	80 83       	st	Z, r24
     48a:	89 e1       	ldi	r24, 0x19	; 25
     48c:	98 e3       	ldi	r25, 0x38	; 56
     48e:	0e 94 a7 0a 	call	0x154e	; 0x154e <qtm_ptc_init_acquisition_module>
     492:	89 e4       	ldi	r24, 0x49	; 73
     494:	98 e3       	ldi	r25, 0x38	; 56
     496:	0e 94 ed 0a 	call	0x15da	; 0x15da <qtm_ptc_qtlib_assign_signal_memory>
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	89 e1       	ldi	r24, 0x19	; 25
     4a0:	98 e3       	ldi	r25, 0x38	; 56
     4a2:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <qtm_enable_sensor_node>
     4a6:	60 e0       	ldi	r22, 0x00	; 0
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	89 e1       	ldi	r24, 0x19	; 25
     4ac:	98 e3       	ldi	r25, 0x38	; 56
     4ae:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <qtm_calibrate_sensor_node>
     4b2:	44 e4       	ldi	r20, 0x44	; 68
     4b4:	58 e3       	ldi	r21, 0x38	; 56
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	84 e0       	ldi	r24, 0x04	; 4
     4ba:	98 e3       	ldi	r25, 0x38	; 56
     4bc:	0e 94 a4 04 	call	0x948	; 0x948 <qtm_init_sensor_key>
     4c0:	08 95       	ret

000004c2 <touch_process>:
     4c2:	80 91 35 38 	lds	r24, 0x3835	; 0x803835 <time_to_measure_touch_flag>
     4c6:	81 30       	cpi	r24, 0x01	; 1
     4c8:	51 f4       	brne	.+20     	; 0x4de <touch_process+0x1c>
     4ca:	6a e2       	ldi	r22, 0x2A	; 42
     4cc:	72 e0       	ldi	r23, 0x02	; 2
     4ce:	89 e1       	ldi	r24, 0x19	; 25
     4d0:	98 e3       	ldi	r25, 0x38	; 56
     4d2:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <qtm_ptc_start_measurement_seq>
     4d6:	81 11       	cpse	r24, r1
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <touch_process+0x1c>
     4da:	10 92 35 38 	sts	0x3835, r1	; 0x803835 <time_to_measure_touch_flag>
     4de:	80 91 34 38 	lds	r24, 0x3834	; 0x803834 <touch_postprocess_request>
     4e2:	81 30       	cpi	r24, 0x01	; 1
     4e4:	09 f5       	brne	.+66     	; 0x528 <touch_process+0x66>
     4e6:	10 92 34 38 	sts	0x3834, r1	; 0x803834 <touch_postprocess_request>
     4ea:	0e 94 29 09 	call	0x1252	; 0x1252 <qtm_acquisition_process>
     4ee:	81 11       	cpse	r24, r1
     4f0:	0a c0       	rjmp	.+20     	; 0x506 <touch_process+0x44>
     4f2:	84 e0       	ldi	r24, 0x04	; 4
     4f4:	98 e3       	ldi	r25, 0x38	; 56
     4f6:	0e 94 c3 04 	call	0x986	; 0x986 <qtm_key_sensors_process>
     4fa:	88 23       	and	r24, r24
     4fc:	39 f0       	breq	.+14     	; 0x50c <touch_process+0x4a>
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <module_error_code>
     504:	03 c0       	rjmp	.+6      	; 0x50c <touch_process+0x4a>
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	80 93 32 38 	sts	0x3832, r24	; 0x803832 <module_error_code>
     50c:	e0 91 04 38 	lds	r30, 0x3804	; 0x803804 <qtlib_key_set1>
     510:	f0 91 05 38 	lds	r31, 0x3805	; 0x803805 <qtlib_key_set1+0x1>
     514:	80 81       	ld	r24, Z
     516:	88 23       	and	r24, r24
     518:	24 f4       	brge	.+8      	; 0x522 <touch_process+0x60>
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <time_to_measure_touch_flag>
     520:	08 95       	ret
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	80 93 33 38 	sts	0x3833, r24	; 0x803833 <measurement_done_touch>
     528:	08 95       	ret

0000052a <touch_timer_handler>:
     52a:	80 91 43 38 	lds	r24, 0x3843	; 0x803843 <interrupt_cnt>
     52e:	8f 5f       	subi	r24, 0xFF	; 255
     530:	84 31       	cpi	r24, 0x14	; 20
     532:	18 f4       	brcc	.+6      	; 0x53a <touch_timer_handler+0x10>
     534:	80 93 43 38 	sts	0x3843, r24	; 0x803843 <interrupt_cnt>
     538:	08 95       	ret
     53a:	10 92 43 38 	sts	0x3843, r1	; 0x803843 <interrupt_cnt>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	80 93 35 38 	sts	0x3835, r24	; 0x803835 <time_to_measure_touch_flag>
     544:	84 e1       	ldi	r24, 0x14	; 20
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	0e 94 99 04 	call	0x932	; 0x932 <qtm_update_qtlib_timer>
     54c:	08 95       	ret

0000054e <get_sensor_state>:
     54e:	9c 01       	movw	r18, r24
     550:	22 0f       	add	r18, r18
     552:	33 1f       	adc	r19, r19
     554:	82 0f       	add	r24, r18
     556:	93 1f       	adc	r25, r19
     558:	88 0f       	add	r24, r24
     55a:	99 1f       	adc	r25, r25
     55c:	e0 91 08 38 	lds	r30, 0x3808	; 0x803808 <qtlib_key_set1+0x4>
     560:	f0 91 09 38 	lds	r31, 0x3809	; 0x803809 <qtlib_key_set1+0x5>
     564:	e8 0f       	add	r30, r24
     566:	f9 1f       	adc	r31, r25
     568:	80 81       	ld	r24, Z
     56a:	08 95       	ret

0000056c <__vector_20>:
Input    :  none
Output  :  none
Notes    :  none
============================================================================*/
ISR(ADC0_RESRDY_vect)
{
     56c:	1f 92       	push	r1
     56e:	0f 92       	push	r0
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	0f 92       	push	r0
     574:	11 24       	eor	r1, r1
     576:	2f 93       	push	r18
     578:	3f 93       	push	r19
     57a:	4f 93       	push	r20
     57c:	5f 93       	push	r21
     57e:	6f 93       	push	r22
     580:	7f 93       	push	r23
     582:	8f 93       	push	r24
     584:	9f 93       	push	r25
     586:	af 93       	push	r26
     588:	bf 93       	push	r27
     58a:	ef 93       	push	r30
     58c:	ff 93       	push	r31
	qtm_t161x_ptc_handler_eoc();
     58e:	0e 94 bd 0b 	call	0x177a	; 0x177a <qtm_t161x_ptc_handler_eoc>
}
     592:	ff 91       	pop	r31
     594:	ef 91       	pop	r30
     596:	bf 91       	pop	r27
     598:	af 91       	pop	r26
     59a:	9f 91       	pop	r25
     59c:	8f 91       	pop	r24
     59e:	7f 91       	pop	r23
     5a0:	6f 91       	pop	r22
     5a2:	5f 91       	pop	r21
     5a4:	4f 91       	pop	r20
     5a6:	3f 91       	pop	r19
     5a8:	2f 91       	pop	r18
     5aa:	0f 90       	pop	r0
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	0f 90       	pop	r0
     5b0:	1f 90       	pop	r1
     5b2:	18 95       	reti

000005b4 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	08 95       	ret

000005b8 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
     5b8:	40 e0       	ldi	r20, 0x00	; 0
     5ba:	68 ed       	ldi	r22, 0xD8	; 216
     5bc:	81 e6       	ldi	r24, 0x61	; 97
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 0f 04 	call	0x81e	; 0x81e <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	08 95       	ret

000005c8 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     5c8:	78 94       	sei

	return 0;
}
     5ca:	80 e0       	ldi	r24, 0x00	; 0
     5cc:	08 95       	ret

000005ce <mcu_init>:
#include <system.h>

void TIMER_0_initialization(void)
{

	TIMER_0_init();
     5ce:	e0 e1       	ldi	r30, 0x10	; 16
     5d0:	f4 e0       	ldi	r31, 0x04	; 4
     5d2:	80 81       	ld	r24, Z
     5d4:	88 60       	ori	r24, 0x08	; 8
     5d6:	81 93       	st	Z+, r24
     5d8:	e8 31       	cpi	r30, 0x18	; 24
     5da:	84 e0       	ldi	r24, 0x04	; 4
     5dc:	f8 07       	cpc	r31, r24
     5de:	c9 f7       	brne	.-14     	; 0x5d2 <mcu_init+0x4>
     5e0:	e0 e3       	ldi	r30, 0x30	; 48
     5e2:	f4 e0       	ldi	r31, 0x04	; 4
     5e4:	80 81       	ld	r24, Z
     5e6:	88 60       	ori	r24, 0x08	; 8
     5e8:	81 93       	st	Z+, r24
     5ea:	e8 33       	cpi	r30, 0x38	; 56
     5ec:	84 e0       	ldi	r24, 0x04	; 4
     5ee:	f8 07       	cpc	r31, r24
     5f0:	c9 f7       	brne	.-14     	; 0x5e4 <mcu_init+0x16>
     5f2:	e0 e5       	ldi	r30, 0x50	; 80
     5f4:	f4 e0       	ldi	r31, 0x04	; 4
     5f6:	80 81       	ld	r24, Z
     5f8:	88 60       	ori	r24, 0x08	; 8
     5fa:	81 93       	st	Z+, r24
     5fc:	e8 35       	cpi	r30, 0x58	; 88
     5fe:	84 e0       	ldi	r24, 0x04	; 4
     600:	f8 07       	cpc	r31, r24
     602:	c9 f7       	brne	.-14     	; 0x5f6 <mcu_init+0x28>
     604:	08 95       	ret

00000606 <I2C_0_initialization>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     606:	02 9a       	sbi	0x00, 2	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     608:	0a 98       	cbi	0x01, 2	; 1
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     60a:	e2 e1       	ldi	r30, 0x12	; 18
     60c:	f4 e0       	ldi	r31, 0x04	; 4
     60e:	80 81       	ld	r24, Z
     610:	87 7f       	andi	r24, 0xF7	; 247
     612:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     614:	80 81       	ld	r24, Z
     616:	8f 77       	andi	r24, 0x7F	; 127
     618:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     61a:	80 81       	ld	r24, Z
     61c:	88 7f       	andi	r24, 0xF8	; 248
     61e:	80 83       	st	Z, r24
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	/* set the alternate pin mux */
	PORTMUX.CTRLB |= PORTMUX_TWI0_bm;
     620:	a0 e0       	ldi	r26, 0x00	; 0
     622:	b2 e0       	ldi	r27, 0x02	; 2
     624:	11 96       	adiw	r26, 0x01	; 1
     626:	8c 91       	ld	r24, X
     628:	11 97       	sbiw	r26, 0x01	; 1
     62a:	80 61       	ori	r24, 0x10	; 16
     62c:	11 96       	adiw	r26, 0x01	; 1
     62e:	8c 93       	st	X, r24
     630:	11 97       	sbiw	r26, 0x01	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     632:	01 9a       	sbi	0x00, 1	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     634:	09 98       	cbi	0x01, 1	; 1
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     636:	e1 e1       	ldi	r30, 0x11	; 17
     638:	f4 e0       	ldi	r31, 0x04	; 4
     63a:	80 81       	ld	r24, Z
     63c:	87 7f       	andi	r24, 0xF7	; 247
     63e:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
     640:	80 81       	ld	r24, Z
     642:	8f 77       	andi	r24, 0x7F	; 127
     644:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
     646:	80 81       	ld	r24, Z
     648:	88 7f       	andi	r24, 0xF8	; 248
     64a:	80 83       	st	Z, r24
	    // <PORT_ISC_INPUT_DISABLE_gc"> Digital Input Buffer disabled
	    // <PORT_ISC_LEVEL_gc"> Sense low Level
	    PORT_ISC_INTDISABLE_gc);

	/* set the alternate pin mux */
	PORTMUX.CTRLB |= PORTMUX_TWI0_bm;
     64c:	11 96       	adiw	r26, 0x01	; 1
     64e:	8c 91       	ld	r24, X
     650:	11 97       	sbiw	r26, 0x01	; 1
     652:	80 61       	ori	r24, 0x10	; 16
     654:	11 96       	adiw	r26, 0x01	; 1
     656:	8c 93       	st	X, r24

	I2C_0_init();
     658:	0e 94 4c 03 	call	0x698	; 0x698 <I2C_0_init>
     65c:	08 95       	ret

0000065e <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
     65e:	0e 94 e7 02 	call	0x5ce	; 0x5ce <mcu_init>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     662:	03 98       	cbi	0x00, 3	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     664:	e3 e1       	ldi	r30, 0x13	; 19
     666:	f4 e0       	ldi	r31, 0x04	; 4
     668:	80 81       	ld	r24, Z
     66a:	87 7f       	andi	r24, 0xF7	; 247
     66c:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     66e:	21 9a       	sbi	0x04, 1	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     670:	29 98       	cbi	0x05, 1	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     672:	22 9a       	sbi	0x04, 2	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     674:	2a 98       	cbi	0x05, 2	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     676:	43 9a       	sbi	0x08, 3	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
     678:	4b 98       	cbi	0x09, 3	; 9
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	CLKCTRL_init();
     67a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <CLKCTRL_init>

	Timer_init();
     67e:	0e 94 13 04 	call	0x826	; 0x826 <Timer_init>
#include <system.h>

void TIMER_0_initialization(void)
{

	TIMER_0_init();
     682:	0e 94 22 04 	call	0x844	; 0x844 <TIMER_0_init>

	Timer_init();

	TIMER_0_initialization();

	CPUINT_init();
     686:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <CPUINT_init>

	SLPCTRL_init();
     68a:	0e 94 20 04 	call	0x840	; 0x840 <SLPCTRL_init>

	I2C_0_initialization();
     68e:	0e 94 03 03 	call	0x606	; 0x606 <I2C_0_initialization>

	BOD_init();
     692:	0e 94 da 02 	call	0x5b4	; 0x5b4 <BOD_init>
     696:	08 95       	ret

00000698 <I2C_0_init>:
 *
 * \return Nothing
 */
void I2C_0_set_collision_callback(I2C_0_callback handler)
{
	I2C_0_collision_interrupt_handler = handler;
     698:	e0 e1       	ldi	r30, 0x10	; 16
     69a:	f8 e0       	ldi	r31, 0x08	; 8
     69c:	8a e4       	ldi	r24, 0x4A	; 74
     69e:	84 87       	std	Z+12, r24	; 0x0c
     6a0:	83 ee       	ldi	r24, 0xE3	; 227
     6a2:	81 87       	std	Z+9, r24	; 0x09
     6a4:	10 92 53 38 	sts	0x3853, r1	; 0x803853 <I2C_0_write_interrupt_handler>
     6a8:	10 92 54 38 	sts	0x3854, r1	; 0x803854 <I2C_0_write_interrupt_handler+0x1>
     6ac:	10 92 55 38 	sts	0x3855, r1	; 0x803855 <I2C_0_read_interrupt_handler>
     6b0:	10 92 56 38 	sts	0x3856, r1	; 0x803856 <I2C_0_read_interrupt_handler+0x1>
     6b4:	10 92 57 38 	sts	0x3857, r1	; 0x803857 <I2C_0_address_interrupt_handler>
     6b8:	10 92 58 38 	sts	0x3858, r1	; 0x803858 <I2C_0_address_interrupt_handler+0x1>
     6bc:	10 92 51 38 	sts	0x3851, r1	; 0x803851 <I2C_0_stop_interrupt_handler>
     6c0:	10 92 52 38 	sts	0x3852, r1	; 0x803852 <I2C_0_stop_interrupt_handler+0x1>
     6c4:	10 92 5b 38 	sts	0x385B, r1	; 0x80385b <I2C_0_collision_interrupt_handler>
     6c8:	10 92 5c 38 	sts	0x385C, r1	; 0x80385c <I2C_0_collision_interrupt_handler+0x1>
     6cc:	10 92 59 38 	sts	0x3859, r1	; 0x803859 <I2C_0_bus_error_interrupt_handler>
     6d0:	10 92 5a 38 	sts	0x385A, r1	; 0x80385a <I2C_0_bus_error_interrupt_handler+0x1>
     6d4:	08 95       	ret

000006d6 <I2C_0_goto_unaddressed>:
     6d6:	e0 e1       	ldi	r30, 0x10	; 16
     6d8:	f8 e0       	ldi	r31, 0x08	; 8
     6da:	83 85       	ldd	r24, Z+11	; 0x0b
     6dc:	80 6c       	ori	r24, 0xC0	; 192
     6de:	83 87       	std	Z+11, r24	; 0x0b
     6e0:	82 e0       	ldi	r24, 0x02	; 2
     6e2:	82 87       	std	Z+10, r24	; 0x0a
     6e4:	08 95       	ret

000006e6 <I2C_0_read_callback>:
     6e6:	e0 91 55 38 	lds	r30, 0x3855	; 0x803855 <I2C_0_read_interrupt_handler>
     6ea:	f0 91 56 38 	lds	r31, 0x3856	; 0x803856 <I2C_0_read_interrupt_handler+0x1>
     6ee:	30 97       	sbiw	r30, 0x00	; 0
     6f0:	09 f0       	breq	.+2      	; 0x6f4 <I2C_0_read_callback+0xe>
     6f2:	09 95       	icall
     6f4:	08 95       	ret

000006f6 <I2C_0_write_callback>:
     6f6:	e0 91 53 38 	lds	r30, 0x3853	; 0x803853 <I2C_0_write_interrupt_handler>
     6fa:	f0 91 54 38 	lds	r31, 0x3854	; 0x803854 <I2C_0_write_interrupt_handler+0x1>
     6fe:	30 97       	sbiw	r30, 0x00	; 0
     700:	09 f0       	breq	.+2      	; 0x704 <I2C_0_write_callback+0xe>
     702:	09 95       	icall
     704:	08 95       	ret

00000706 <I2C_0_address_callback>:
     706:	e0 91 57 38 	lds	r30, 0x3857	; 0x803857 <I2C_0_address_interrupt_handler>
     70a:	f0 91 58 38 	lds	r31, 0x3858	; 0x803858 <I2C_0_address_interrupt_handler+0x1>
     70e:	30 97       	sbiw	r30, 0x00	; 0
     710:	09 f0       	breq	.+2      	; 0x714 <I2C_0_address_callback+0xe>
     712:	09 95       	icall
     714:	08 95       	ret

00000716 <I2C_0_stop_callback>:
     716:	e0 91 51 38 	lds	r30, 0x3851	; 0x803851 <I2C_0_stop_interrupt_handler>
     71a:	f0 91 52 38 	lds	r31, 0x3852	; 0x803852 <I2C_0_stop_interrupt_handler+0x1>
     71e:	30 97       	sbiw	r30, 0x00	; 0
     720:	09 f0       	breq	.+2      	; 0x724 <I2C_0_stop_callback+0xe>
     722:	09 95       	icall
     724:	08 95       	ret

00000726 <I2C_0_collision_callback>:
     726:	e0 91 5b 38 	lds	r30, 0x385B	; 0x80385b <I2C_0_collision_interrupt_handler>
     72a:	f0 91 5c 38 	lds	r31, 0x385C	; 0x80385c <I2C_0_collision_interrupt_handler+0x1>
     72e:	30 97       	sbiw	r30, 0x00	; 0
     730:	09 f0       	breq	.+2      	; 0x734 <I2C_0_collision_callback+0xe>
     732:	09 95       	icall
     734:	08 95       	ret

00000736 <I2C_0_bus_error_callback>:
}

// Bus Error Event Interrupt Handlers
void I2C_0_bus_error_callback(void)
{
	if (I2C_0_bus_error_interrupt_handler) {
     736:	e0 91 59 38 	lds	r30, 0x3859	; 0x803859 <I2C_0_bus_error_interrupt_handler>
     73a:	f0 91 5a 38 	lds	r31, 0x385A	; 0x80385a <I2C_0_bus_error_interrupt_handler+0x1>
     73e:	30 97       	sbiw	r30, 0x00	; 0
     740:	09 f0       	breq	.+2      	; 0x744 <I2C_0_bus_error_callback+0xe>
		I2C_0_bus_error_interrupt_handler();
     742:	09 95       	icall
     744:	08 95       	ret

00000746 <I2C_0_isr>:
 */
void I2C_0_isr()
{
	static char isFirstByte = true; // to bypass the NACK flag for the first byte in a transaction

	if (TWI0.SSTATUS & TWI_COLL_bm) {
     746:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__TEXT_REGION_LENGTH__+0x70081b>
     74a:	83 ff       	sbrs	r24, 3
     74c:	03 c0       	rjmp	.+6      	; 0x754 <I2C_0_isr+0xe>
		I2C_0_collision_callback();
     74e:	0e 94 93 03 	call	0x726	; 0x726 <I2C_0_collision_callback>
		return;
     752:	08 95       	ret
	}

	if (TWI0.SSTATUS & TWI_BUSERR_bm) {
     754:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__TEXT_REGION_LENGTH__+0x70081b>
     758:	82 ff       	sbrs	r24, 2
     75a:	03 c0       	rjmp	.+6      	; 0x762 <I2C_0_isr+0x1c>
		I2C_0_bus_error_callback();
     75c:	0e 94 9b 03 	call	0x736	; 0x736 <I2C_0_bus_error_callback>
		return;
     760:	08 95       	ret
	}

	if ((TWI0.SSTATUS & TWI_APIF_bm) && (TWI0.SSTATUS & TWI_AP_bm)) {
     762:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__TEXT_REGION_LENGTH__+0x70081b>
     766:	86 ff       	sbrs	r24, 6
     768:	0a c0       	rjmp	.+20     	; 0x77e <I2C_0_isr+0x38>
     76a:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__TEXT_REGION_LENGTH__+0x70081b>
     76e:	80 ff       	sbrs	r24, 0
     770:	06 c0       	rjmp	.+12     	; 0x77e <I2C_0_isr+0x38>
		I2C_0_address_callback();
     772:	0e 94 83 03 	call	0x706	; 0x706 <I2C_0_address_callback>
		isFirstByte = true;
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	80 93 2c 38 	sts	0x382C, r24	; 0x80382c <isFirstByte.4071>
		return;
     77c:	08 95       	ret
	}

	if (TWI0.SSTATUS & TWI_DIF_bm) {
     77e:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__TEXT_REGION_LENGTH__+0x70081b>
     782:	88 23       	and	r24, r24
     784:	d4 f4       	brge	.+52     	; 0x7ba <I2C_0_isr+0x74>
		if (TWI0.SSTATUS & TWI_DIR_bm) {
     786:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__TEXT_REGION_LENGTH__+0x70081b>
     78a:	81 ff       	sbrs	r24, 1
     78c:	13 c0       	rjmp	.+38     	; 0x7b4 <I2C_0_isr+0x6e>
			// Master wishes to read from slave
			if (!(TWI0.SSTATUS & TWI_RXACK_bm) || isFirstByte) {
     78e:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__TEXT_REGION_LENGTH__+0x70081b>
     792:	84 ff       	sbrs	r24, 4
     794:	04 c0       	rjmp	.+8      	; 0x79e <I2C_0_isr+0x58>
     796:	80 91 2c 38 	lds	r24, 0x382C	; 0x80382c <isFirstByte.4071>
     79a:	88 23       	and	r24, r24
     79c:	41 f0       	breq	.+16     	; 0x7ae <I2C_0_isr+0x68>
				// Received ACK from master or First byte of transaction
				isFirstByte = false;
     79e:	10 92 2c 38 	sts	0x382C, r1	; 0x80382c <isFirstByte.4071>
				I2C_0_read_callback();
     7a2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <I2C_0_read_callback>
				TWI0.SCTRLB = TWI_ACKACT_ACK_gc | TWI_SCMD_RESPONSE_gc;
     7a6:	83 e0       	ldi	r24, 0x03	; 3
     7a8:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <__TEXT_REGION_LENGTH__+0x70081a>
     7ac:	08 95       	ret
			} else {
				// Received NACK from master
				I2C_0_goto_unaddressed();
     7ae:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <I2C_0_goto_unaddressed>
     7b2:	08 95       	ret
			}
		} else // Master wishes to write to slave
		{
			I2C_0_write_callback();
     7b4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <I2C_0_write_callback>
     7b8:	08 95       	ret
		}
		return;
	}

	// Check if STOP was received
	if ((TWI0.SSTATUS & TWI_APIF_bm) && (!(TWI0.SSTATUS & TWI_AP_bm))) {
     7ba:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__TEXT_REGION_LENGTH__+0x70081b>
     7be:	86 ff       	sbrs	r24, 6
     7c0:	09 c0       	rjmp	.+18     	; 0x7d4 <I2C_0_isr+0x8e>
     7c2:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__TEXT_REGION_LENGTH__+0x70081b>
     7c6:	80 fd       	sbrc	r24, 0
     7c8:	05 c0       	rjmp	.+10     	; 0x7d4 <I2C_0_isr+0x8e>
		I2C_0_stop_callback();
     7ca:	0e 94 8b 03 	call	0x716	; 0x716 <I2C_0_stop_callback>
		TWI0.SCTRLB = TWI_SCMD_COMPTRANS_gc;
     7ce:	82 e0       	ldi	r24, 0x02	; 2
     7d0:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <__TEXT_REGION_LENGTH__+0x70081a>
     7d4:	08 95       	ret

000007d6 <__vector_24>:
		return;
	}
}

ISR(TWI0_TWIS_vect)
{
     7d6:	1f 92       	push	r1
     7d8:	0f 92       	push	r0
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	0f 92       	push	r0
     7de:	11 24       	eor	r1, r1
     7e0:	2f 93       	push	r18
     7e2:	3f 93       	push	r19
     7e4:	4f 93       	push	r20
     7e6:	5f 93       	push	r21
     7e8:	6f 93       	push	r22
     7ea:	7f 93       	push	r23
     7ec:	8f 93       	push	r24
     7ee:	9f 93       	push	r25
     7f0:	af 93       	push	r26
     7f2:	bf 93       	push	r27
     7f4:	ef 93       	push	r30
     7f6:	ff 93       	push	r31
	I2C_0_isr();
     7f8:	0e 94 a3 03 	call	0x746	; 0x746 <I2C_0_isr>
}
     7fc:	ff 91       	pop	r31
     7fe:	ef 91       	pop	r30
     800:	bf 91       	pop	r27
     802:	af 91       	pop	r26
     804:	9f 91       	pop	r25
     806:	8f 91       	pop	r24
     808:	7f 91       	pop	r23
     80a:	6f 91       	pop	r22
     80c:	5f 91       	pop	r21
     80e:	4f 91       	pop	r20
     810:	3f 91       	pop	r19
     812:	2f 91       	pop	r18
     814:	0f 90       	pop	r0
     816:	0f be       	out	0x3f, r0	; 63
     818:	0f 90       	pop	r0
     81a:	1f 90       	pop	r1
     81c:	18 95       	reti

0000081e <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
     81e:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
     820:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
     822:	40 83       	st	Z, r20
	ret                             // Return to caller
     824:	08 95       	ret

00000826 <Timer_init>:
 * \return Initialization status.
 */
int8_t Timer_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
     826:	e0 e4       	ldi	r30, 0x40	; 64
     828:	f1 e0       	ldi	r31, 0x01	; 1
     82a:	81 81       	ldd	r24, Z+1	; 0x01
     82c:	81 11       	cpse	r24, r1
     82e:	fd cf       	rjmp	.-6      	; 0x82a <Timer_init+0x4>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
     830:	e0 e4       	ldi	r30, 0x40	; 64
     832:	f1 e0       	ldi	r31, 0x01	; 1
     834:	81 e8       	ldi	r24, 0x81	; 129
     836:	80 83       	st	Z, r24

	// RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 1 << RTC_CMP_bp    /* Compare Match Interrupt enable: enabled */
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	82 83       	std	Z+2, r24	; 0x02
	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
}
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	08 95       	ret

00000840 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	08 95       	ret

00000844 <TIMER_0_init>:

	// TCA0.SINGLE.CMP2 = 0x0; /* Compare Register 2: 0x0 */

	// TCA0.SINGLE.CNT = 0x0; /* Count: 0x0 */

	TCA0.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp       /* Auto Lock Update: disabled */
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	fa e0       	ldi	r31, 0x0A	; 10
     848:	80 e1       	ldi	r24, 0x10	; 16
     84a:	81 83       	std	Z+1, r24	; 0x01
	// TCA0.SINGLE.DBGCTRL = 0 << TCA_SINGLE_DBGRUN_bp; /* Debug Run: disabled */

	// TCA0.SINGLE.EVCTRL = 0 << TCA_SINGLE_CNTEI_bp /* Count on Event Input: disabled */
	//		 | TCA_SINGLE_EVACT_POSEDGE_gc; /* Count on positive edge event */

	TCA0.SINGLE.INTCTRL = 1 << TCA_SINGLE_CMP0_bp   /* Compare 0 Interrupt: enabled */
     84c:	81 e1       	ldi	r24, 0x11	; 17
     84e:	82 87       	std	Z+10, r24	; 0x0a
	| 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	| 1 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: disabled */

	// TCA0.SINGLE.PER = 0xffff; /* Period: 0xffff */

	TCA0.SINGLE.PER = 0xFF;
     850:	8f ef       	ldi	r24, 0xFF	; 255
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	86 a3       	std	Z+38, r24	; 0x26
     856:	97 a3       	std	Z+39, r25	; 0x27

	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc   /* System Clock / 16 */
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	80 83       	st	Z, r24
	| 1 << TCA_SINGLE_ENABLE_bp; /* Module Enable: enabled */

	return 0;
}
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	08 95       	ret

00000860 <check_for_aks_block>:
     860:	cf 92       	push	r12
     862:	df 92       	push	r13
     864:	ff 92       	push	r15
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
     870:	ae 81       	ldd	r26, Y+6	; 0x06
     872:	bf 81       	ldd	r27, Y+7	; 0x07
     874:	eb 01       	movw	r28, r22
     876:	cc 0f       	add	r28, r28
     878:	dd 1f       	adc	r29, r29
     87a:	c6 0f       	add	r28, r22
     87c:	d7 1f       	adc	r29, r23
     87e:	ca 0f       	add	r28, r26
     880:	db 1f       	adc	r29, r27
     882:	fa 80       	ldd	r15, Y+2	; 0x02
     884:	fc 01       	movw	r30, r24
     886:	44 81       	ldd	r20, Z+4	; 0x04
     888:	55 81       	ldd	r21, Z+5	; 0x05
     88a:	e6 e0       	ldi	r30, 0x06	; 6
     88c:	e6 9f       	mul	r30, r22
     88e:	90 01       	movw	r18, r0
     890:	e7 9f       	mul	r30, r23
     892:	30 0d       	add	r19, r0
     894:	11 24       	eor	r1, r1
     896:	8a 01       	movw	r16, r20
     898:	02 0f       	add	r16, r18
     89a:	13 1f       	adc	r17, r19
     89c:	f8 01       	movw	r30, r16
     89e:	22 81       	ldd	r18, Z+2	; 0x02
     8a0:	33 81       	ldd	r19, Z+3	; 0x03
     8a2:	f9 01       	movw	r30, r18
     8a4:	21 81       	ldd	r18, Z+1	; 0x01
     8a6:	32 81       	ldd	r19, Z+2	; 0x02
     8a8:	f8 01       	movw	r30, r16
     8aa:	04 81       	ldd	r16, Z+4	; 0x04
     8ac:	15 81       	ldd	r17, Z+5	; 0x05
     8ae:	20 1b       	sub	r18, r16
     8b0:	31 0b       	sbc	r19, r17
     8b2:	e8 81       	ld	r30, Y
     8b4:	2e 1b       	sub	r18, r30
     8b6:	31 09       	sbc	r19, r1
     8b8:	ec 01       	movw	r28, r24
     8ba:	ea 81       	ldd	r30, Y+2	; 0x02
     8bc:	fb 81       	ldd	r31, Y+3	; 0x03
     8be:	00 81       	ld	r16, Z
     8c0:	11 81       	ldd	r17, Z+1	; 0x01
     8c2:	fa 01       	movw	r30, r20
     8c4:	40 e0       	ldi	r20, 0x00	; 0
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	40 17       	cp	r20, r16
     8ca:	51 07       	cpc	r21, r17
     8cc:	39 f1       	breq	.+78     	; 0x91c <check_for_aks_block+0xbc>
     8ce:	46 17       	cp	r20, r22
     8d0:	57 07       	cpc	r21, r23
     8d2:	f9 f0       	breq	.+62     	; 0x912 <check_for_aks_block+0xb2>
     8d4:	12 96       	adiw	r26, 0x02	; 2
     8d6:	8c 91       	ld	r24, X
     8d8:	12 97       	sbiw	r26, 0x02	; 2
     8da:	f8 12       	cpse	r15, r24
     8dc:	1a c0       	rjmp	.+52     	; 0x912 <check_for_aks_block+0xb2>
     8de:	80 81       	ld	r24, Z
     8e0:	85 58       	subi	r24, 0x85	; 133
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	e8 f0       	brcs	.+58     	; 0x920 <check_for_aks_block+0xc0>
     8e6:	c4 80       	ldd	r12, Z+4	; 0x04
     8e8:	d5 80       	ldd	r13, Z+5	; 0x05
     8ea:	82 81       	ldd	r24, Z+2	; 0x02
     8ec:	93 81       	ldd	r25, Z+3	; 0x03
     8ee:	ec 01       	movw	r28, r24
     8f0:	89 81       	ldd	r24, Y+1	; 0x01
     8f2:	9a 81       	ldd	r25, Y+2	; 0x02
     8f4:	c8 16       	cp	r12, r24
     8f6:	d9 06       	cpc	r13, r25
     8f8:	60 f4       	brcc	.+24     	; 0x912 <check_for_aks_block+0xb2>
     8fa:	8c 19       	sub	r24, r12
     8fc:	9d 09       	sbc	r25, r13
     8fe:	cc 91       	ld	r28, X
     900:	d0 e0       	ldi	r29, 0x00	; 0
     902:	c8 17       	cp	r28, r24
     904:	d9 07       	cpc	r29, r25
     906:	28 f4       	brcc	.+10     	; 0x912 <check_for_aks_block+0xb2>
     908:	8c 1b       	sub	r24, r28
     90a:	9d 0b       	sbc	r25, r29
     90c:	28 17       	cp	r18, r24
     90e:	39 07       	cpc	r19, r25
     910:	38 f0       	brcs	.+14     	; 0x920 <check_for_aks_block+0xc0>
     912:	4f 5f       	subi	r20, 0xFF	; 255
     914:	5f 4f       	sbci	r21, 0xFF	; 255
     916:	13 96       	adiw	r26, 0x03	; 3
     918:	36 96       	adiw	r30, 0x06	; 6
     91a:	d6 cf       	rjmp	.-84     	; 0x8c8 <check_for_aks_block+0x68>
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	01 c0       	rjmp	.+2      	; 0x922 <check_for_aks_block+0xc2>
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	ff 90       	pop	r15
     92c:	df 90       	pop	r13
     92e:	cf 90       	pop	r12
     930:	08 95       	ret

00000932 <qtm_update_qtlib_timer>:
     932:	20 91 36 38 	lds	r18, 0x3836	; 0x803836 <qtm_local_ms_timecount>
     936:	30 91 37 38 	lds	r19, 0x3837	; 0x803837 <qtm_local_ms_timecount+0x1>
     93a:	82 0f       	add	r24, r18
     93c:	93 1f       	adc	r25, r19
     93e:	80 93 36 38 	sts	0x3836, r24	; 0x803836 <qtm_local_ms_timecount>
     942:	90 93 37 38 	sts	0x3837, r25	; 0x803837 <qtm_local_ms_timecount+0x1>
     946:	08 95       	ret

00000948 <qtm_init_sensor_key>:
     948:	00 97       	sbiw	r24, 0x00	; 0
     94a:	d9 f0       	breq	.+54     	; 0x982 <qtm_init_sensor_key+0x3a>
     94c:	41 15       	cp	r20, r1
     94e:	51 05       	cpc	r21, r1
     950:	c1 f0       	breq	.+48     	; 0x982 <qtm_init_sensor_key+0x3a>
     952:	26 e0       	ldi	r18, 0x06	; 6
     954:	62 9f       	mul	r22, r18
     956:	b0 01       	movw	r22, r0
     958:	11 24       	eor	r1, r1
     95a:	dc 01       	movw	r26, r24
     95c:	14 96       	adiw	r26, 0x04	; 4
     95e:	ed 91       	ld	r30, X+
     960:	fc 91       	ld	r31, X
     962:	15 97       	sbiw	r26, 0x05	; 5
     964:	e6 0f       	add	r30, r22
     966:	f7 1f       	adc	r31, r23
     968:	21 e0       	ldi	r18, 0x01	; 1
     96a:	20 83       	st	Z, r18
     96c:	14 96       	adiw	r26, 0x04	; 4
     96e:	8d 91       	ld	r24, X+
     970:	9c 91       	ld	r25, X
     972:	15 97       	sbiw	r26, 0x05	; 5
     974:	fc 01       	movw	r30, r24
     976:	e6 0f       	add	r30, r22
     978:	f7 1f       	adc	r31, r23
     97a:	42 83       	std	Z+2, r20	; 0x02
     97c:	53 83       	std	Z+3, r21	; 0x03
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	08 95       	ret
     982:	8b e0       	ldi	r24, 0x0B	; 11
     984:	08 95       	ret

00000986 <qtm_key_sensors_process>:
     986:	2f 92       	push	r2
     988:	3f 92       	push	r3
     98a:	4f 92       	push	r4
     98c:	5f 92       	push	r5
     98e:	6f 92       	push	r6
     990:	7f 92       	push	r7
     992:	8f 92       	push	r8
     994:	9f 92       	push	r9
     996:	af 92       	push	r10
     998:	bf 92       	push	r11
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	00 97       	sbiw	r24, 0x00	; 0
     9ac:	09 f4       	brne	.+2      	; 0x9b0 <qtm_key_sensors_process+0x2a>
     9ae:	7d c3       	rjmp	.+1786   	; 0x10aa <qtm_key_sensors_process+0x724>
     9b0:	ec 01       	movw	r28, r24
     9b2:	a1 2c       	mov	r10, r1
     9b4:	b1 2c       	mov	r11, r1
     9b6:	81 2c       	mov	r8, r1
     9b8:	91 2c       	mov	r9, r1
     9ba:	21 2c       	mov	r2, r1
     9bc:	d1 2c       	mov	r13, r1
     9be:	33 e0       	ldi	r19, 0x03	; 3
     9c0:	c3 2e       	mov	r12, r19
     9c2:	45 e8       	ldi	r20, 0x85	; 133
     9c4:	64 2e       	mov	r6, r20
     9c6:	56 e8       	ldi	r21, 0x86	; 134
     9c8:	75 2e       	mov	r7, r21
     9ca:	67 e0       	ldi	r22, 0x07	; 7
     9cc:	36 2e       	mov	r3, r22
     9ce:	72 e0       	ldi	r23, 0x02	; 2
     9d0:	47 2e       	mov	r4, r23
     9d2:	e8 e0       	ldi	r30, 0x08	; 8
     9d4:	5e 2e       	mov	r5, r30
     9d6:	ea 81       	ldd	r30, Y+2	; 0x02
     9d8:	fb 81       	ldd	r31, Y+3	; 0x03
     9da:	80 81       	ld	r24, Z
     9dc:	91 81       	ldd	r25, Z+1	; 0x01
     9de:	88 16       	cp	r8, r24
     9e0:	99 06       	cpc	r9, r25
     9e2:	08 f0       	brcs	.+2      	; 0x9e6 <qtm_key_sensors_process+0x60>
     9e4:	a5 c1       	rjmp	.+842    	; 0xd30 <qtm_key_sensors_process+0x3aa>
     9e6:	75 01       	movw	r14, r10
     9e8:	ee 0c       	add	r14, r14
     9ea:	ff 1c       	adc	r15, r15
     9ec:	0c 81       	ldd	r16, Y+4	; 0x04
     9ee:	1d 81       	ldd	r17, Y+5	; 0x05
     9f0:	0e 0d       	add	r16, r14
     9f2:	1f 1d       	adc	r17, r15
     9f4:	d8 01       	movw	r26, r16
     9f6:	8c 91       	ld	r24, X
     9f8:	84 30       	cpi	r24, 0x04	; 4
     9fa:	09 f4       	brne	.+2      	; 0x9fe <qtm_key_sensors_process+0x78>
     9fc:	a2 c0       	rjmp	.+324    	; 0xb42 <qtm_key_sensors_process+0x1bc>
     9fe:	38 f4       	brcc	.+14     	; 0xa0e <qtm_key_sensors_process+0x88>
     a00:	82 30       	cpi	r24, 0x02	; 2
     a02:	01 f1       	breq	.+64     	; 0xa44 <qtm_key_sensors_process+0xbe>
     a04:	08 f0       	brcs	.+2      	; 0xa08 <qtm_key_sensors_process+0x82>
     a06:	49 c0       	rjmp	.+146    	; 0xa9a <qtm_key_sensors_process+0x114>
     a08:	81 30       	cpi	r24, 0x01	; 1
     a0a:	59 f0       	breq	.+22     	; 0xa22 <qtm_key_sensors_process+0x9c>
     a0c:	8a c1       	rjmp	.+788    	; 0xd22 <qtm_key_sensors_process+0x39c>
     a0e:	85 38       	cpi	r24, 0x85	; 133
     a10:	09 f4       	brne	.+2      	; 0xa14 <qtm_key_sensors_process+0x8e>
     a12:	c2 c0       	rjmp	.+388    	; 0xb98 <qtm_key_sensors_process+0x212>
     a14:	86 38       	cpi	r24, 0x86	; 134
     a16:	09 f4       	brne	.+2      	; 0xa1a <qtm_key_sensors_process+0x94>
     a18:	f6 c0       	rjmp	.+492    	; 0xc06 <qtm_key_sensors_process+0x280>
     a1a:	87 30       	cpi	r24, 0x07	; 7
     a1c:	09 f0       	breq	.+2      	; 0xa20 <qtm_key_sensors_process+0x9a>
     a1e:	81 c1       	rjmp	.+770    	; 0xd22 <qtm_key_sensors_process+0x39c>
     a20:	37 c1       	rjmp	.+622    	; 0xc90 <qtm_key_sensors_process+0x30a>
     a22:	d8 01       	movw	r26, r16
     a24:	12 96       	adiw	r26, 0x02	; 2
     a26:	ed 91       	ld	r30, X+
     a28:	fc 91       	ld	r31, X
     a2a:	13 97       	sbiw	r26, 0x03	; 3
     a2c:	80 81       	ld	r24, Z
     a2e:	8e 71       	andi	r24, 0x1E	; 30
     a30:	09 f0       	breq	.+2      	; 0xa34 <qtm_key_sensors_process+0xae>
     a32:	69 c1       	rjmp	.+722    	; 0xd06 <qtm_key_sensors_process+0x380>
     a34:	4c 92       	st	X, r4
     a36:	8c 81       	ldd	r24, Y+4	; 0x04
     a38:	9d 81       	ldd	r25, Y+5	; 0x05
     a3a:	fc 01       	movw	r30, r24
     a3c:	ee 0d       	add	r30, r14
     a3e:	ff 1d       	adc	r31, r15
     a40:	51 82       	std	Z+1, r5	; 0x01
     a42:	61 c1       	rjmp	.+706    	; 0xd06 <qtm_key_sensors_process+0x380>
     a44:	f8 01       	movw	r30, r16
     a46:	21 81       	ldd	r18, Z+1	; 0x01
     a48:	22 23       	and	r18, r18
     a4a:	29 f1       	breq	.+74     	; 0xa96 <qtm_key_sensors_process+0x110>
     a4c:	02 80       	ldd	r0, Z+2	; 0x02
     a4e:	f3 81       	ldd	r31, Z+3	; 0x03
     a50:	e0 2d       	mov	r30, r0
     a52:	25 30       	cpi	r18, 0x05	; 5
     a54:	20 f0       	brcs	.+8      	; 0xa5e <qtm_key_sensors_process+0xd8>
     a56:	81 81       	ldd	r24, Z+1	; 0x01
     a58:	92 81       	ldd	r25, Z+2	; 0x02
     a5a:	d8 01       	movw	r26, r16
     a5c:	0e c0       	rjmp	.+28     	; 0xa7a <qtm_key_sensors_process+0xf4>
     a5e:	d8 01       	movw	r26, r16
     a60:	14 96       	adiw	r26, 0x04	; 4
     a62:	8d 91       	ld	r24, X+
     a64:	9c 91       	ld	r25, X
     a66:	15 97       	sbiw	r26, 0x05	; 5
     a68:	41 81       	ldd	r20, Z+1	; 0x01
     a6a:	52 81       	ldd	r21, Z+2	; 0x02
     a6c:	84 17       	cp	r24, r20
     a6e:	95 07       	cpc	r25, r21
     a70:	69 f0       	breq	.+26     	; 0xa8c <qtm_key_sensors_process+0x106>
     a72:	48 17       	cp	r20, r24
     a74:	59 07       	cpc	r21, r25
     a76:	30 f4       	brcc	.+12     	; 0xa84 <qtm_key_sensors_process+0xfe>
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	14 96       	adiw	r26, 0x04	; 4
     a7c:	8d 93       	st	X+, r24
     a7e:	9c 93       	st	X, r25
     a80:	15 97       	sbiw	r26, 0x05	; 5
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <qtm_key_sensors_process+0x106>
     a84:	01 96       	adiw	r24, 0x01	; 1
     a86:	f8 01       	movw	r30, r16
     a88:	84 83       	std	Z+4, r24	; 0x04
     a8a:	95 83       	std	Z+5, r25	; 0x05
     a8c:	21 50       	subi	r18, 0x01	; 1
     a8e:	d8 01       	movw	r26, r16
     a90:	11 96       	adiw	r26, 0x01	; 1
     a92:	2c 93       	st	X, r18
     a94:	38 c1       	rjmp	.+624    	; 0xd06 <qtm_key_sensors_process+0x380>
     a96:	f8 01       	movw	r30, r16
     a98:	31 c1       	rjmp	.+610    	; 0xcfc <qtm_key_sensors_process+0x376>
     a9a:	d8 01       	movw	r26, r16
     a9c:	14 96       	adiw	r26, 0x04	; 4
     a9e:	2d 91       	ld	r18, X+
     aa0:	3c 91       	ld	r19, X
     aa2:	15 97       	sbiw	r26, 0x05	; 5
     aa4:	12 96       	adiw	r26, 0x02	; 2
     aa6:	8d 91       	ld	r24, X+
     aa8:	9c 91       	ld	r25, X
     aaa:	13 97       	sbiw	r26, 0x03	; 3
     aac:	dc 01       	movw	r26, r24
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	4d 91       	ld	r20, X+
     ab2:	5c 91       	ld	r21, X
     ab4:	12 97       	sbiw	r26, 0x02	; 2
     ab6:	24 17       	cp	r18, r20
     ab8:	35 07       	cpc	r19, r21
     aba:	09 f4       	brne	.+2      	; 0xabe <qtm_key_sensors_process+0x138>
     abc:	32 c1       	rjmp	.+612    	; 0xd22 <qtm_key_sensors_process+0x39c>
     abe:	8e 81       	ldd	r24, Y+6	; 0x06
     ac0:	9f 81       	ldd	r25, Y+7	; 0x07
     ac2:	42 17       	cp	r20, r18
     ac4:	53 07       	cpc	r21, r19
     ac6:	e0 f4       	brcc	.+56     	; 0xb00 <qtm_key_sensors_process+0x17a>
     ac8:	24 1b       	sub	r18, r20
     aca:	35 0b       	sbc	r19, r21
     acc:	dc 01       	movw	r26, r24
     ace:	aa 0d       	add	r26, r10
     ad0:	bb 1d       	adc	r27, r11
     ad2:	8c 91       	ld	r24, X
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	05 80       	ldd	r0, Z+5	; 0x05
     ad8:	02 c0       	rjmp	.+4      	; 0xade <qtm_key_sensors_process+0x158>
     ada:	95 95       	asr	r25
     adc:	87 95       	ror	r24
     ade:	0a 94       	dec	r0
     ae0:	e2 f7       	brpl	.-8      	; 0xada <qtm_key_sensors_process+0x154>
     ae2:	99 27       	eor	r25, r25
     ae4:	28 17       	cp	r18, r24
     ae6:	39 07       	cpc	r19, r25
     ae8:	08 f4       	brcc	.+2      	; 0xaec <qtm_key_sensors_process+0x166>
     aea:	1b c1       	rjmp	.+566    	; 0xd22 <qtm_key_sensors_process+0x39c>
     aec:	84 81       	ldd	r24, Z+4	; 0x04
     aee:	88 23       	and	r24, r24
     af0:	09 f4       	brne	.+2      	; 0xaf4 <qtm_key_sensors_process+0x16e>
     af2:	17 c1       	rjmp	.+558    	; 0xd22 <qtm_key_sensors_process+0x39c>
     af4:	f8 01       	movw	r30, r16
     af6:	30 82       	st	Z, r3
     af8:	ea 81       	ldd	r30, Y+2	; 0x02
     afa:	fb 81       	ldd	r31, Y+3	; 0x03
     afc:	24 81       	ldd	r18, Z+4	; 0x04
     afe:	1a c0       	rjmp	.+52     	; 0xb34 <qtm_key_sensors_process+0x1ae>
     b00:	fc 01       	movw	r30, r24
     b02:	ea 0d       	add	r30, r10
     b04:	fb 1d       	adc	r31, r11
     b06:	42 1b       	sub	r20, r18
     b08:	53 0b       	sbc	r21, r19
     b0a:	80 81       	ld	r24, Z
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	48 17       	cp	r20, r24
     b10:	59 07       	cpc	r21, r25
     b12:	08 f4       	brcc	.+2      	; 0xb16 <qtm_key_sensors_process+0x190>
     b14:	06 c1       	rjmp	.+524    	; 0xd22 <qtm_key_sensors_process+0x39c>
     b16:	82 81       	ldd	r24, Z+2	; 0x02
     b18:	88 23       	and	r24, r24
     b1a:	31 f0       	breq	.+12     	; 0xb28 <qtm_key_sensors_process+0x1a2>
     b1c:	b4 01       	movw	r22, r8
     b1e:	ce 01       	movw	r24, r28
     b20:	0e 94 30 04 	call	0x860	; 0x860 <check_for_aks_block>
     b24:	81 11       	cpse	r24, r1
     b26:	fd c0       	rjmp	.+506    	; 0xd22 <qtm_key_sensors_process+0x39c>
     b28:	e4 e0       	ldi	r30, 0x04	; 4
     b2a:	d8 01       	movw	r26, r16
     b2c:	ec 93       	st	X, r30
     b2e:	ea 81       	ldd	r30, Y+2	; 0x02
     b30:	fb 81       	ldd	r31, Y+3	; 0x03
     b32:	22 81       	ldd	r18, Z+2	; 0x02
     b34:	8c 81       	ldd	r24, Y+4	; 0x04
     b36:	9d 81       	ldd	r25, Y+5	; 0x05
     b38:	fc 01       	movw	r30, r24
     b3a:	ee 0d       	add	r30, r14
     b3c:	ff 1d       	adc	r31, r15
     b3e:	21 83       	std	Z+1, r18	; 0x01
     b40:	e2 c0       	rjmp	.+452    	; 0xd06 <qtm_key_sensors_process+0x380>
     b42:	d8 01       	movw	r26, r16
     b44:	14 96       	adiw	r26, 0x04	; 4
     b46:	2d 91       	ld	r18, X+
     b48:	3c 91       	ld	r19, X
     b4a:	15 97       	sbiw	r26, 0x05	; 5
     b4c:	12 96       	adiw	r26, 0x02	; 2
     b4e:	ed 91       	ld	r30, X+
     b50:	fc 91       	ld	r31, X
     b52:	13 97       	sbiw	r26, 0x03	; 3
     b54:	81 81       	ldd	r24, Z+1	; 0x01
     b56:	92 81       	ldd	r25, Z+2	; 0x02
     b58:	82 17       	cp	r24, r18
     b5a:	93 07       	cpc	r25, r19
     b5c:	08 f4       	brcc	.+2      	; 0xb60 <qtm_key_sensors_process+0x1da>
     b5e:	d7 c0       	rjmp	.+430    	; 0xd0e <qtm_key_sensors_process+0x388>
     b60:	ee 81       	ldd	r30, Y+6	; 0x06
     b62:	ff 81       	ldd	r31, Y+7	; 0x07
     b64:	ea 0d       	add	r30, r10
     b66:	fb 1d       	adc	r31, r11
     b68:	82 1b       	sub	r24, r18
     b6a:	93 0b       	sbc	r25, r19
     b6c:	20 81       	ld	r18, Z
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	28 17       	cp	r18, r24
     b72:	39 07       	cpc	r19, r25
     b74:	08 f0       	brcs	.+2      	; 0xb78 <qtm_key_sensors_process+0x1f2>
     b76:	af c0       	rjmp	.+350    	; 0xcd6 <qtm_key_sensors_process+0x350>
     b78:	82 81       	ldd	r24, Z+2	; 0x02
     b7a:	88 23       	and	r24, r24
     b7c:	31 f0       	breq	.+12     	; 0xb8a <qtm_key_sensors_process+0x204>
     b7e:	b4 01       	movw	r22, r8
     b80:	ce 01       	movw	r24, r28
     b82:	0e 94 30 04 	call	0x860	; 0x860 <check_for_aks_block>
     b86:	81 11       	cpse	r24, r1
     b88:	cc c0       	rjmp	.+408    	; 0xd22 <qtm_key_sensors_process+0x39c>
     b8a:	f8 01       	movw	r30, r16
     b8c:	81 81       	ldd	r24, Z+1	; 0x01
     b8e:	88 23       	and	r24, r24
     b90:	09 f4       	brne	.+2      	; 0xb94 <qtm_key_sensors_process+0x20e>
     b92:	67 c0       	rjmp	.+206    	; 0xc62 <qtm_key_sensors_process+0x2dc>
     b94:	81 50       	subi	r24, 0x01	; 1
     b96:	b6 c0       	rjmp	.+364    	; 0xd04 <qtm_key_sensors_process+0x37e>
     b98:	a8 81       	ld	r26, Y
     b9a:	b9 81       	ldd	r27, Y+1	; 0x01
     b9c:	80 85       	ldd	r24, Z+8	; 0x08
     b9e:	13 96       	adiw	r26, 0x03	; 3
     ba0:	8c 93       	st	X, r24
     ba2:	ec 81       	ldd	r30, Y+4	; 0x04
     ba4:	fd 81       	ldd	r31, Y+5	; 0x05
     ba6:	ee 0d       	add	r30, r14
     ba8:	ff 1d       	adc	r31, r15
     baa:	44 81       	ldd	r20, Z+4	; 0x04
     bac:	55 81       	ldd	r21, Z+5	; 0x05
     bae:	a2 81       	ldd	r26, Z+2	; 0x02
     bb0:	b3 81       	ldd	r27, Z+3	; 0x03
     bb2:	11 96       	adiw	r26, 0x01	; 1
     bb4:	8d 91       	ld	r24, X+
     bb6:	9c 91       	ld	r25, X
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	84 17       	cp	r24, r20
     bbc:	95 07       	cpc	r25, r21
     bbe:	c0 f0       	brcs	.+48     	; 0xbf0 <qtm_key_sensors_process+0x26a>
     bc0:	ae 81       	ldd	r26, Y+6	; 0x06
     bc2:	bf 81       	ldd	r27, Y+7	; 0x07
     bc4:	aa 0d       	add	r26, r10
     bc6:	bb 1d       	adc	r27, r11
     bc8:	6c 91       	ld	r22, X
     bca:	26 2f       	mov	r18, r22
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	11 96       	adiw	r26, 0x01	; 1
     bd0:	7c 91       	ld	r23, X
     bd2:	7f 5f       	subi	r23, 0xFF	; 255
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <qtm_key_sensors_process+0x254>
     bd6:	35 95       	asr	r19
     bd8:	27 95       	ror	r18
     bda:	7a 95       	dec	r23
     bdc:	e2 f7       	brpl	.-8      	; 0xbd6 <qtm_key_sensors_process+0x250>
     bde:	84 1b       	sub	r24, r20
     be0:	95 0b       	sbc	r25, r21
     be2:	62 1b       	sub	r22, r18
     be4:	26 2f       	mov	r18, r22
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	28 17       	cp	r18, r24
     bea:	39 07       	cpc	r19, r25
     bec:	08 f4       	brcc	.+2      	; 0xbf0 <qtm_key_sensors_process+0x26a>
     bee:	97 c0       	rjmp	.+302    	; 0xd1e <qtm_key_sensors_process+0x398>
     bf0:	70 82       	st	Z, r7
     bf2:	ea 81       	ldd	r30, Y+2	; 0x02
     bf4:	fb 81       	ldd	r31, Y+3	; 0x03
     bf6:	22 81       	ldd	r18, Z+2	; 0x02
     bf8:	8c 81       	ldd	r24, Y+4	; 0x04
     bfa:	9d 81       	ldd	r25, Y+5	; 0x05
     bfc:	fc 01       	movw	r30, r24
     bfe:	ee 0d       	add	r30, r14
     c00:	ff 1d       	adc	r31, r15
     c02:	21 83       	std	Z+1, r18	; 0x01
     c04:	42 c0       	rjmp	.+132    	; 0xc8a <qtm_key_sensors_process+0x304>
     c06:	d8 01       	movw	r26, r16
     c08:	14 96       	adiw	r26, 0x04	; 4
     c0a:	6d 91       	ld	r22, X+
     c0c:	7c 91       	ld	r23, X
     c0e:	15 97       	sbiw	r26, 0x05	; 5
     c10:	12 96       	adiw	r26, 0x02	; 2
     c12:	ed 91       	ld	r30, X+
     c14:	fc 91       	ld	r31, X
     c16:	13 97       	sbiw	r26, 0x03	; 3
     c18:	21 81       	ldd	r18, Z+1	; 0x01
     c1a:	32 81       	ldd	r19, Z+2	; 0x02
     c1c:	26 17       	cp	r18, r22
     c1e:	37 07       	cpc	r19, r23
     c20:	58 f4       	brcc	.+22     	; 0xc38 <qtm_key_sensors_process+0x2b2>
     c22:	11 96       	adiw	r26, 0x01	; 1
     c24:	8c 91       	ld	r24, X
     c26:	11 97       	sbiw	r26, 0x01	; 1
     c28:	81 11       	cpse	r24, r1
     c2a:	02 c0       	rjmp	.+4      	; 0xc30 <qtm_key_sensors_process+0x2aa>
     c2c:	cc 92       	st	X, r12
     c2e:	77 c0       	rjmp	.+238    	; 0xd1e <qtm_key_sensors_process+0x398>
     c30:	81 50       	subi	r24, 0x01	; 1
     c32:	f8 01       	movw	r30, r16
     c34:	81 83       	std	Z+1, r24	; 0x01
     c36:	73 c0       	rjmp	.+230    	; 0xd1e <qtm_key_sensors_process+0x398>
     c38:	ee 81       	ldd	r30, Y+6	; 0x06
     c3a:	ff 81       	ldd	r31, Y+7	; 0x07
     c3c:	ea 0d       	add	r30, r10
     c3e:	fb 1d       	adc	r31, r11
     c40:	80 81       	ld	r24, Z
     c42:	48 2f       	mov	r20, r24
     c44:	50 e0       	ldi	r21, 0x00	; 0
     c46:	91 81       	ldd	r25, Z+1	; 0x01
     c48:	9f 5f       	subi	r25, 0xFF	; 255
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <qtm_key_sensors_process+0x2ca>
     c4c:	55 95       	asr	r21
     c4e:	47 95       	ror	r20
     c50:	9a 95       	dec	r25
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <qtm_key_sensors_process+0x2c6>
     c54:	26 1b       	sub	r18, r22
     c56:	37 0b       	sbc	r19, r23
     c58:	84 1b       	sub	r24, r20
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	82 17       	cp	r24, r18
     c5e:	93 07       	cpc	r25, r19
     c60:	60 f4       	brcc	.+24     	; 0xc7a <qtm_key_sensors_process+0x2f4>
     c62:	d8 01       	movw	r26, r16
     c64:	6c 92       	st	X, r6
     c66:	ea 81       	ldd	r30, Y+2	; 0x02
     c68:	fb 81       	ldd	r31, Y+3	; 0x03
     c6a:	23 81       	ldd	r18, Z+3	; 0x03
     c6c:	8c 81       	ldd	r24, Y+4	; 0x04
     c6e:	9d 81       	ldd	r25, Y+5	; 0x05
     c70:	fc 01       	movw	r30, r24
     c72:	ee 0d       	add	r30, r14
     c74:	ff 1d       	adc	r31, r15
     c76:	21 83       	std	Z+1, r18	; 0x01
     c78:	52 c0       	rjmp	.+164    	; 0xd1e <qtm_key_sensors_process+0x398>
     c7a:	f8 01       	movw	r30, r16
     c7c:	81 81       	ldd	r24, Z+1	; 0x01
     c7e:	81 11       	cpse	r24, r1
     c80:	02 c0       	rjmp	.+4      	; 0xc86 <qtm_key_sensors_process+0x300>
     c82:	c0 82       	st	Z, r12
     c84:	4c c0       	rjmp	.+152    	; 0xd1e <qtm_key_sensors_process+0x398>
     c86:	81 50       	subi	r24, 0x01	; 1
     c88:	81 83       	std	Z+1, r24	; 0x01
     c8a:	22 24       	eor	r2, r2
     c8c:	23 94       	inc	r2
     c8e:	3b c0       	rjmp	.+118    	; 0xd06 <qtm_key_sensors_process+0x380>
     c90:	d8 01       	movw	r26, r16
     c92:	14 96       	adiw	r26, 0x04	; 4
     c94:	2d 91       	ld	r18, X+
     c96:	3c 91       	ld	r19, X
     c98:	15 97       	sbiw	r26, 0x05	; 5
     c9a:	12 96       	adiw	r26, 0x02	; 2
     c9c:	8d 91       	ld	r24, X+
     c9e:	9c 91       	ld	r25, X
     ca0:	13 97       	sbiw	r26, 0x03	; 3
     ca2:	dc 01       	movw	r26, r24
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	8d 91       	ld	r24, X+
     ca8:	9c 91       	ld	r25, X
     caa:	12 97       	sbiw	r26, 0x02	; 2
     cac:	82 17       	cp	r24, r18
     cae:	93 07       	cpc	r25, r19
     cb0:	68 f5       	brcc	.+90     	; 0xd0c <qtm_key_sensors_process+0x386>
     cb2:	28 1b       	sub	r18, r24
     cb4:	39 0b       	sbc	r19, r25
     cb6:	ae 81       	ldd	r26, Y+6	; 0x06
     cb8:	bf 81       	ldd	r27, Y+7	; 0x07
     cba:	aa 0d       	add	r26, r10
     cbc:	bb 1d       	adc	r27, r11
     cbe:	8c 91       	ld	r24, X
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	05 80       	ldd	r0, Z+5	; 0x05
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <qtm_key_sensors_process+0x344>
     cc6:	95 95       	asr	r25
     cc8:	87 95       	ror	r24
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <qtm_key_sensors_process+0x340>
     cce:	99 27       	eor	r25, r25
     cd0:	28 17       	cp	r18, r24
     cd2:	39 07       	cpc	r19, r25
     cd4:	18 f4       	brcc	.+6      	; 0xcdc <qtm_key_sensors_process+0x356>
     cd6:	f8 01       	movw	r30, r16
     cd8:	c0 82       	st	Z, r12
     cda:	1a c0       	rjmp	.+52     	; 0xd10 <qtm_key_sensors_process+0x38a>
     cdc:	d8 01       	movw	r26, r16
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	8c 91       	ld	r24, X
     ce2:	11 97       	sbiw	r26, 0x01	; 1
     ce4:	81 11       	cpse	r24, r1
     ce6:	0c c0       	rjmp	.+24     	; 0xd00 <qtm_key_sensors_process+0x37a>
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	8c 93       	st	X, r24
     cec:	8c 81       	ldd	r24, Y+4	; 0x04
     cee:	9d 81       	ldd	r25, Y+5	; 0x05
     cf0:	fc 01       	movw	r30, r24
     cf2:	ee 0d       	add	r30, r14
     cf4:	ff 1d       	adc	r31, r15
     cf6:	02 80       	ldd	r0, Z+2	; 0x02
     cf8:	f3 81       	ldd	r31, Z+3	; 0x03
     cfa:	e0 2d       	mov	r30, r0
     cfc:	c0 82       	st	Z, r12
     cfe:	11 c0       	rjmp	.+34     	; 0xd22 <qtm_key_sensors_process+0x39c>
     d00:	81 50       	subi	r24, 0x01	; 1
     d02:	f8 01       	movw	r30, r16
     d04:	81 83       	std	Z+1, r24	; 0x01
     d06:	dd 24       	eor	r13, r13
     d08:	d3 94       	inc	r13
     d0a:	0b c0       	rjmp	.+22     	; 0xd22 <qtm_key_sensors_process+0x39c>
     d0c:	d8 01       	movw	r26, r16
     d0e:	cc 92       	st	X, r12
     d10:	8c 81       	ldd	r24, Y+4	; 0x04
     d12:	9d 81       	ldd	r25, Y+5	; 0x05
     d14:	fc 01       	movw	r30, r24
     d16:	ee 0d       	add	r30, r14
     d18:	ff 1d       	adc	r31, r15
     d1a:	11 82       	std	Z+1, r1	; 0x01
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <qtm_key_sensors_process+0x39c>
     d1e:	22 24       	eor	r2, r2
     d20:	23 94       	inc	r2
     d22:	bf ef       	ldi	r27, 0xFF	; 255
     d24:	8b 1a       	sub	r8, r27
     d26:	9b 0a       	sbc	r9, r27
     d28:	e3 e0       	ldi	r30, 0x03	; 3
     d2a:	ae 0e       	add	r10, r30
     d2c:	b1 1c       	adc	r11, r1
     d2e:	53 ce       	rjmp	.-858    	; 0x9d6 <qtm_key_sensors_process+0x50>
     d30:	e8 81       	ld	r30, Y
     d32:	f9 81       	ldd	r31, Y+1	; 0x01
     d34:	80 81       	ld	r24, Z
     d36:	87 ff       	sbrs	r24, 7
     d38:	23 c0       	rjmp	.+70     	; 0xd80 <qtm_key_sensors_process+0x3fa>
     d3a:	40 e0       	ldi	r20, 0x00	; 0
     d3c:	50 e0       	ldi	r21, 0x00	; 0
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	ea 81       	ldd	r30, Y+2	; 0x02
     d44:	fb 81       	ldd	r31, Y+3	; 0x03
     d46:	80 81       	ld	r24, Z
     d48:	91 81       	ldd	r25, Z+1	; 0x01
     d4a:	28 17       	cp	r18, r24
     d4c:	39 07       	cpc	r19, r25
     d4e:	98 f4       	brcc	.+38     	; 0xd76 <qtm_key_sensors_process+0x3f0>
     d50:	ec 81       	ldd	r30, Y+4	; 0x04
     d52:	fd 81       	ldd	r31, Y+5	; 0x05
     d54:	e4 0f       	add	r30, r20
     d56:	f5 1f       	adc	r31, r21
     d58:	a2 81       	ldd	r26, Z+2	; 0x02
     d5a:	b3 81       	ldd	r27, Z+3	; 0x03
     d5c:	8c 91       	ld	r24, X
     d5e:	80 fd       	sbrc	r24, 0
     d60:	05 c0       	rjmp	.+10     	; 0xd6c <qtm_key_sensors_process+0x3e6>
     d62:	90 81       	ld	r25, Z
     d64:	97 7f       	andi	r25, 0xF7	; 247
     d66:	11 f0       	breq	.+4      	; 0xd6c <qtm_key_sensors_process+0x3e6>
     d68:	81 60       	ori	r24, 0x01	; 1
     d6a:	8c 93       	st	X, r24
     d6c:	2f 5f       	subi	r18, 0xFF	; 255
     d6e:	3f 4f       	sbci	r19, 0xFF	; 255
     d70:	4a 5f       	subi	r20, 0xFA	; 250
     d72:	5f 4f       	sbci	r21, 0xFF	; 255
     d74:	e6 cf       	rjmp	.-52     	; 0xd42 <qtm_key_sensors_process+0x3bc>
     d76:	e8 81       	ld	r30, Y
     d78:	f9 81       	ldd	r31, Y+1	; 0x01
     d7a:	80 81       	ld	r24, Z
     d7c:	8f 77       	andi	r24, 0x7F	; 127
     d7e:	80 83       	st	Z, r24
     d80:	d1 10       	cpse	r13, r1
     d82:	07 c0       	rjmp	.+14     	; 0xd92 <qtm_key_sensors_process+0x40c>
     d84:	e8 81       	ld	r30, Y
     d86:	f9 81       	ldd	r31, Y+1	; 0x01
     d88:	21 10       	cpse	r2, r1
     d8a:	6f c0       	rjmp	.+222    	; 0xe6a <qtm_key_sensors_process+0x4e4>
     d8c:	80 81       	ld	r24, Z
     d8e:	8e 7f       	andi	r24, 0xFE	; 254
     d90:	6e c0       	rjmp	.+220    	; 0xe6e <qtm_key_sensors_process+0x4e8>
     d92:	ea 81       	ldd	r30, Y+2	; 0x02
     d94:	fb 81       	ldd	r31, Y+3	; 0x03
     d96:	81 85       	ldd	r24, Z+9	; 0x09
     d98:	88 23       	and	r24, r24
     d9a:	a1 f3       	breq	.-24     	; 0xd84 <qtm_key_sensors_process+0x3fe>
     d9c:	e8 81       	ld	r30, Y
     d9e:	f9 81       	ldd	r31, Y+1	; 0x01
     da0:	80 81       	ld	r24, Z
     da2:	80 68       	ori	r24, 0x80	; 128
     da4:	80 83       	st	Z, r24
     da6:	ea 81       	ldd	r30, Y+2	; 0x02
     da8:	fb 81       	ldd	r31, Y+3	; 0x03
     daa:	81 85       	ldd	r24, Z+9	; 0x09
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	51 f7       	brne	.-44     	; 0xd84 <qtm_key_sensors_process+0x3fe>
     db0:	40 e0       	ldi	r20, 0x00	; 0
     db2:	50 e0       	ldi	r21, 0x00	; 0
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	96 e0       	ldi	r25, 0x06	; 6
     dba:	d9 2e       	mov	r13, r25
     dbc:	ea 81       	ldd	r30, Y+2	; 0x02
     dbe:	fb 81       	ldd	r31, Y+3	; 0x03
     dc0:	60 81       	ld	r22, Z
     dc2:	71 81       	ldd	r23, Z+1	; 0x01
     dc4:	26 17       	cp	r18, r22
     dc6:	37 07       	cpc	r19, r23
     dc8:	e8 f6       	brcc	.-70     	; 0xd84 <qtm_key_sensors_process+0x3fe>
     dca:	0c 81       	ldd	r16, Y+4	; 0x04
     dcc:	1d 81       	ldd	r17, Y+5	; 0x05
     dce:	fa 01       	movw	r30, r20
     dd0:	ee 0f       	add	r30, r30
     dd2:	ff 1f       	adc	r31, r31
     dd4:	e0 0f       	add	r30, r16
     dd6:	f1 1f       	adc	r31, r17
     dd8:	80 81       	ld	r24, Z
     dda:	98 2f       	mov	r25, r24
     ddc:	97 7f       	andi	r25, 0xF7	; 247
     dde:	a1 f1       	breq	.+104    	; 0xe48 <qtm_key_sensors_process+0x4c2>
     de0:	85 38       	cpi	r24, 0x85	; 133
     de2:	11 f0       	breq	.+4      	; 0xde8 <qtm_key_sensors_process+0x462>
     de4:	83 30       	cpi	r24, 0x03	; 3
     de6:	b1 f5       	brne	.+108    	; 0xe54 <qtm_key_sensors_process+0x4ce>
     de8:	ee 80       	ldd	r14, Y+6	; 0x06
     dea:	ff 80       	ldd	r15, Y+7	; 0x07
     dec:	d7 01       	movw	r26, r14
     dee:	a4 0f       	add	r26, r20
     df0:	b5 1f       	adc	r27, r21
     df2:	12 96       	adiw	r26, 0x02	; 2
     df4:	bc 90       	ld	r11, X
     df6:	bb 20       	and	r11, r11
     df8:	39 f1       	breq	.+78     	; 0xe48 <qtm_key_sensors_process+0x4c2>
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	c1 2c       	mov	r12, r1
     e00:	86 17       	cp	r24, r22
     e02:	97 07       	cpc	r25, r23
     e04:	f8 f4       	brcc	.+62     	; 0xe44 <qtm_key_sensors_process+0x4be>
     e06:	28 17       	cp	r18, r24
     e08:	39 07       	cpc	r19, r25
     e0a:	d1 f0       	breq	.+52     	; 0xe40 <qtm_key_sensors_process+0x4ba>
     e0c:	d8 9e       	mul	r13, r24
     e0e:	d0 01       	movw	r26, r0
     e10:	d9 9e       	mul	r13, r25
     e12:	b0 0d       	add	r27, r0
     e14:	11 24       	eor	r1, r1
     e16:	a0 0f       	add	r26, r16
     e18:	b1 1f       	adc	r27, r17
     e1a:	ac 91       	ld	r26, X
     e1c:	a4 30       	cpi	r26, 0x04	; 4
     e1e:	11 f0       	breq	.+4      	; 0xe24 <qtm_key_sensors_process+0x49e>
     e20:	a6 38       	cpi	r26, 0x86	; 134
     e22:	71 f4       	brne	.+28     	; 0xe40 <qtm_key_sensors_process+0x4ba>
     e24:	dc 01       	movw	r26, r24
     e26:	aa 0f       	add	r26, r26
     e28:	bb 1f       	adc	r27, r27
     e2a:	a8 0f       	add	r26, r24
     e2c:	b9 1f       	adc	r27, r25
     e2e:	ae 0d       	add	r26, r14
     e30:	bf 1d       	adc	r27, r15
     e32:	12 96       	adiw	r26, 0x02	; 2
     e34:	ac 91       	ld	r26, X
     e36:	ba 12       	cpse	r11, r26
     e38:	03 c0       	rjmp	.+6      	; 0xe40 <qtm_key_sensors_process+0x4ba>
     e3a:	cb 01       	movw	r24, r22
     e3c:	cc 24       	eor	r12, r12
     e3e:	c3 94       	inc	r12
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	de cf       	rjmp	.-68     	; 0xe00 <qtm_key_sensors_process+0x47a>
     e44:	c1 10       	cpse	r12, r1
     e46:	06 c0       	rjmp	.+12     	; 0xe54 <qtm_key_sensors_process+0x4ce>
     e48:	02 80       	ldd	r0, Z+2	; 0x02
     e4a:	f3 81       	ldd	r31, Z+3	; 0x03
     e4c:	e0 2d       	mov	r30, r0
     e4e:	80 81       	ld	r24, Z
     e50:	8e 7f       	andi	r24, 0xFE	; 254
     e52:	05 c0       	rjmp	.+10     	; 0xe5e <qtm_key_sensors_process+0x4d8>
     e54:	02 80       	ldd	r0, Z+2	; 0x02
     e56:	f3 81       	ldd	r31, Z+3	; 0x03
     e58:	e0 2d       	mov	r30, r0
     e5a:	80 81       	ld	r24, Z
     e5c:	81 60       	ori	r24, 0x01	; 1
     e5e:	80 83       	st	Z, r24
     e60:	2f 5f       	subi	r18, 0xFF	; 255
     e62:	3f 4f       	sbci	r19, 0xFF	; 255
     e64:	4d 5f       	subi	r20, 0xFD	; 253
     e66:	5f 4f       	sbci	r21, 0xFF	; 255
     e68:	a9 cf       	rjmp	.-174    	; 0xdbc <qtm_key_sensors_process+0x436>
     e6a:	80 81       	ld	r24, Z
     e6c:	81 60       	ori	r24, 0x01	; 1
     e6e:	80 83       	st	Z, r24
     e70:	80 91 36 38 	lds	r24, 0x3836	; 0x803836 <qtm_local_ms_timecount>
     e74:	90 91 37 38 	lds	r25, 0x3837	; 0x803837 <qtm_local_ms_timecount+0x1>
     e78:	e8 81       	ld	r30, Y
     e7a:	f9 81       	ldd	r31, Y+1	; 0x01
     e7c:	21 81       	ldd	r18, Z+1	; 0x01
     e7e:	32 81       	ldd	r19, Z+2	; 0x02
     e80:	a9 01       	movw	r20, r18
     e82:	48 53       	subi	r20, 0x38	; 56
     e84:	5f 4f       	sbci	r21, 0xFF	; 255
     e86:	48 17       	cp	r20, r24
     e88:	59 07       	cpc	r21, r25
     e8a:	38 f4       	brcc	.+14     	; 0xe9a <qtm_key_sensors_process+0x514>
     e8c:	82 1b       	sub	r24, r18
     e8e:	93 0b       	sbc	r25, r19
     e90:	aa 24       	eor	r10, r10
     e92:	a3 94       	inc	r10
     e94:	a3 e0       	ldi	r26, 0x03	; 3
     e96:	ba 2e       	mov	r11, r26
     e98:	44 c0       	rjmp	.+136    	; 0xf22 <qtm_key_sensors_process+0x59c>
     e9a:	82 17       	cp	r24, r18
     e9c:	93 07       	cpc	r25, r19
     e9e:	10 f0       	brcs	.+4      	; 0xea4 <qtm_key_sensors_process+0x51e>
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	04 c1       	rjmp	.+520    	; 0x10ac <qtm_key_sensors_process+0x726>
     ea4:	82 1b       	sub	r24, r18
     ea6:	93 0b       	sbc	r25, r19
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	89 3c       	cpi	r24, 0xC9	; 201
     eac:	91 05       	cpc	r25, r1
     eae:	c0 f3       	brcs	.-16     	; 0xea0 <qtm_key_sensors_process+0x51a>
     eb0:	ef cf       	rjmp	.-34     	; 0xe90 <qtm_key_sensors_process+0x50a>
     eb2:	88 5c       	subi	r24, 0xC8	; 200
     eb4:	91 09       	sbc	r25, r1
     eb6:	e8 81       	ld	r30, Y
     eb8:	f9 81       	ldd	r31, Y+1	; 0x01
     eba:	21 81       	ldd	r18, Z+1	; 0x01
     ebc:	32 81       	ldd	r19, Z+2	; 0x02
     ebe:	28 53       	subi	r18, 0x38	; 56
     ec0:	3f 4f       	sbci	r19, 0xFF	; 255
     ec2:	21 83       	std	Z+1, r18	; 0x01
     ec4:	32 83       	std	Z+2, r19	; 0x02
     ec6:	23 81       	ldd	r18, Z+3	; 0x03
     ec8:	21 11       	cpse	r18, r1
     eca:	96 c0       	rjmp	.+300    	; 0xff8 <qtm_key_sensors_process+0x672>
     ecc:	24 81       	ldd	r18, Z+4	; 0x04
     ece:	22 23       	and	r18, r18
     ed0:	11 f0       	breq	.+4      	; 0xed6 <qtm_key_sensors_process+0x550>
     ed2:	21 50       	subi	r18, 0x01	; 1
     ed4:	24 83       	std	Z+4, r18	; 0x04
     ed6:	e8 81       	ld	r30, Y
     ed8:	f9 81       	ldd	r31, Y+1	; 0x01
     eda:	25 81       	ldd	r18, Z+5	; 0x05
     edc:	22 23       	and	r18, r18
     ede:	11 f0       	breq	.+4      	; 0xee4 <qtm_key_sensors_process+0x55e>
     ee0:	21 50       	subi	r18, 0x01	; 1
     ee2:	25 83       	std	Z+5, r18	; 0x05
     ee4:	8a 80       	ldd	r8, Y+2	; 0x02
     ee6:	9b 80       	ldd	r9, Y+3	; 0x03
     ee8:	d4 01       	movw	r26, r8
     eea:	16 96       	adiw	r26, 0x06	; 6
     eec:	2c 91       	ld	r18, X
     eee:	16 97       	sbiw	r26, 0x06	; 6
     ef0:	21 11       	cpse	r18, r1
     ef2:	1b c0       	rjmp	.+54     	; 0xf2a <qtm_key_sensors_process+0x5a4>
     ef4:	8a 80       	ldd	r8, Y+2	; 0x02
     ef6:	9b 80       	ldd	r9, Y+3	; 0x03
     ef8:	f4 01       	movw	r30, r8
     efa:	27 81       	ldd	r18, Z+7	; 0x07
     efc:	21 11       	cpse	r18, r1
     efe:	48 c0       	rjmp	.+144    	; 0xf90 <qtm_key_sensors_process+0x60a>
     f00:	ea 81       	ldd	r30, Y+2	; 0x02
     f02:	fb 81       	ldd	r31, Y+3	; 0x03
     f04:	23 81       	ldd	r18, Z+3	; 0x03
     f06:	22 23       	and	r18, r18
     f08:	61 f0       	breq	.+24     	; 0xf22 <qtm_key_sensors_process+0x59c>
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	a0 e0       	ldi	r26, 0x00	; 0
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	ea 81       	ldd	r30, Y+2	; 0x02
     f14:	fb 81       	ldd	r31, Y+3	; 0x03
     f16:	40 81       	ld	r20, Z
     f18:	51 81       	ldd	r21, Z+1	; 0x01
     f1a:	a4 17       	cp	r26, r20
     f1c:	b5 07       	cpc	r27, r21
     f1e:	08 f4       	brcc	.+2      	; 0xf22 <qtm_key_sensors_process+0x59c>
     f20:	6e c0       	rjmp	.+220    	; 0xffe <qtm_key_sensors_process+0x678>
     f22:	89 3c       	cpi	r24, 0xC9	; 201
     f24:	91 05       	cpc	r25, r1
     f26:	28 f6       	brcc	.-118    	; 0xeb2 <qtm_key_sensors_process+0x52c>
     f28:	bb cf       	rjmp	.-138    	; 0xea0 <qtm_key_sensors_process+0x51a>
     f2a:	08 81       	ld	r16, Y
     f2c:	19 81       	ldd	r17, Y+1	; 0x01
     f2e:	f8 01       	movw	r30, r16
     f30:	24 81       	ldd	r18, Z+4	; 0x04
     f32:	21 11       	cpse	r18, r1
     f34:	df cf       	rjmp	.-66     	; 0xef4 <qtm_key_sensors_process+0x56e>
     f36:	ed 90       	ld	r14, X+
     f38:	fc 90       	ld	r15, X
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	50 e0       	ldi	r21, 0x00	; 0
     f42:	4e 15       	cp	r20, r14
     f44:	5f 05       	cpc	r21, r15
     f46:	f1 f0       	breq	.+60     	; 0xf84 <qtm_key_sensors_process+0x5fe>
     f48:	ec 81       	ldd	r30, Y+4	; 0x04
     f4a:	fd 81       	ldd	r31, Y+5	; 0x05
     f4c:	e6 0f       	add	r30, r22
     f4e:	f7 1f       	adc	r31, r23
     f50:	20 81       	ld	r18, Z
     f52:	23 30       	cpi	r18, 0x03	; 3
     f54:	11 f0       	breq	.+4      	; 0xf5a <qtm_key_sensors_process+0x5d4>
     f56:	28 30       	cpi	r18, 0x08	; 8
     f58:	81 f4       	brne	.+32     	; 0xf7a <qtm_key_sensors_process+0x5f4>
     f5a:	24 81       	ldd	r18, Z+4	; 0x04
     f5c:	35 81       	ldd	r19, Z+5	; 0x05
     f5e:	c2 80       	ldd	r12, Z+2	; 0x02
     f60:	d3 80       	ldd	r13, Z+3	; 0x03
     f62:	d6 01       	movw	r26, r12
     f64:	11 96       	adiw	r26, 0x01	; 1
     f66:	cd 90       	ld	r12, X+
     f68:	dc 90       	ld	r13, X
     f6a:	12 97       	sbiw	r26, 0x02	; 2
     f6c:	2c 15       	cp	r18, r12
     f6e:	3d 05       	cpc	r19, r13
     f70:	20 f4       	brcc	.+8      	; 0xf7a <qtm_key_sensors_process+0x5f4>
     f72:	2f 5f       	subi	r18, 0xFF	; 255
     f74:	3f 4f       	sbci	r19, 0xFF	; 255
     f76:	24 83       	std	Z+4, r18	; 0x04
     f78:	35 83       	std	Z+5, r19	; 0x05
     f7a:	4f 5f       	subi	r20, 0xFF	; 255
     f7c:	5f 4f       	sbci	r21, 0xFF	; 255
     f7e:	6a 5f       	subi	r22, 0xFA	; 250
     f80:	7f 4f       	sbci	r23, 0xFF	; 255
     f82:	df cf       	rjmp	.-66     	; 0xf42 <qtm_key_sensors_process+0x5bc>
     f84:	f4 01       	movw	r30, r8
     f86:	26 81       	ldd	r18, Z+6	; 0x06
     f88:	d8 01       	movw	r26, r16
     f8a:	14 96       	adiw	r26, 0x04	; 4
     f8c:	2c 93       	st	X, r18
     f8e:	b2 cf       	rjmp	.-156    	; 0xef4 <qtm_key_sensors_process+0x56e>
     f90:	08 81       	ld	r16, Y
     f92:	19 81       	ldd	r17, Y+1	; 0x01
     f94:	d8 01       	movw	r26, r16
     f96:	15 96       	adiw	r26, 0x05	; 5
     f98:	2c 91       	ld	r18, X
     f9a:	21 11       	cpse	r18, r1
     f9c:	b1 cf       	rjmp	.-158    	; 0xf00 <qtm_key_sensors_process+0x57a>
     f9e:	e0 80       	ld	r14, Z
     fa0:	f1 80       	ldd	r15, Z+1	; 0x01
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	40 e0       	ldi	r20, 0x00	; 0
     fa8:	50 e0       	ldi	r21, 0x00	; 0
     faa:	4e 15       	cp	r20, r14
     fac:	5f 05       	cpc	r21, r15
     fae:	f1 f0       	breq	.+60     	; 0xfec <qtm_key_sensors_process+0x666>
     fb0:	ec 81       	ldd	r30, Y+4	; 0x04
     fb2:	fd 81       	ldd	r31, Y+5	; 0x05
     fb4:	e6 0f       	add	r30, r22
     fb6:	f7 1f       	adc	r31, r23
     fb8:	20 81       	ld	r18, Z
     fba:	23 30       	cpi	r18, 0x03	; 3
     fbc:	11 f0       	breq	.+4      	; 0xfc2 <qtm_key_sensors_process+0x63c>
     fbe:	28 30       	cpi	r18, 0x08	; 8
     fc0:	81 f4       	brne	.+32     	; 0xfe2 <qtm_key_sensors_process+0x65c>
     fc2:	24 81       	ldd	r18, Z+4	; 0x04
     fc4:	35 81       	ldd	r19, Z+5	; 0x05
     fc6:	c2 80       	ldd	r12, Z+2	; 0x02
     fc8:	d3 80       	ldd	r13, Z+3	; 0x03
     fca:	d6 01       	movw	r26, r12
     fcc:	11 96       	adiw	r26, 0x01	; 1
     fce:	cd 90       	ld	r12, X+
     fd0:	dc 90       	ld	r13, X
     fd2:	12 97       	sbiw	r26, 0x02	; 2
     fd4:	c2 16       	cp	r12, r18
     fd6:	d3 06       	cpc	r13, r19
     fd8:	20 f4       	brcc	.+8      	; 0xfe2 <qtm_key_sensors_process+0x65c>
     fda:	21 50       	subi	r18, 0x01	; 1
     fdc:	31 09       	sbc	r19, r1
     fde:	24 83       	std	Z+4, r18	; 0x04
     fe0:	35 83       	std	Z+5, r19	; 0x05
     fe2:	4f 5f       	subi	r20, 0xFF	; 255
     fe4:	5f 4f       	sbci	r21, 0xFF	; 255
     fe6:	6a 5f       	subi	r22, 0xFA	; 250
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	df cf       	rjmp	.-66     	; 0xfaa <qtm_key_sensors_process+0x624>
     fec:	f4 01       	movw	r30, r8
     fee:	27 81       	ldd	r18, Z+7	; 0x07
     ff0:	d8 01       	movw	r26, r16
     ff2:	15 96       	adiw	r26, 0x05	; 5
     ff4:	2c 93       	st	X, r18
     ff6:	84 cf       	rjmp	.-248    	; 0xf00 <qtm_key_sensors_process+0x57a>
     ff8:	21 50       	subi	r18, 0x01	; 1
     ffa:	23 83       	std	Z+3, r18	; 0x03
     ffc:	81 cf       	rjmp	.-254    	; 0xf00 <qtm_key_sensors_process+0x57a>
     ffe:	a9 01       	movw	r20, r18
    1000:	44 0f       	add	r20, r20
    1002:	55 1f       	adc	r21, r21
    1004:	ec 81       	ldd	r30, Y+4	; 0x04
    1006:	fd 81       	ldd	r31, Y+5	; 0x05
    1008:	e4 0f       	add	r30, r20
    100a:	f5 1f       	adc	r31, r21
    100c:	60 81       	ld	r22, Z
    100e:	65 38       	cpi	r22, 0x85	; 133
    1010:	09 f0       	breq	.+2      	; 0x1014 <qtm_key_sensors_process+0x68e>
    1012:	47 c0       	rjmp	.+142    	; 0x10a2 <qtm_key_sensors_process+0x71c>
    1014:	61 81       	ldd	r22, Z+1	; 0x01
    1016:	66 23       	and	r22, r22
    1018:	19 f0       	breq	.+6      	; 0x1020 <qtm_key_sensors_process+0x69a>
    101a:	61 50       	subi	r22, 0x01	; 1
    101c:	61 83       	std	Z+1, r22	; 0x01
    101e:	41 c0       	rjmp	.+130    	; 0x10a2 <qtm_key_sensors_process+0x71c>
    1020:	a0 82       	st	Z, r10
    1022:	6c 81       	ldd	r22, Y+4	; 0x04
    1024:	7d 81       	ldd	r23, Y+5	; 0x05
    1026:	fb 01       	movw	r30, r22
    1028:	e4 0f       	add	r30, r20
    102a:	f5 1f       	adc	r31, r21
    102c:	02 80       	ldd	r0, Z+2	; 0x02
    102e:	f3 81       	ldd	r31, Z+3	; 0x03
    1030:	e0 2d       	mov	r30, r0
    1032:	b0 82       	st	Z, r11
    1034:	ee 81       	ldd	r30, Y+6	; 0x06
    1036:	ff 81       	ldd	r31, Y+7	; 0x07
    1038:	e2 0f       	add	r30, r18
    103a:	f3 1f       	adc	r31, r19
    103c:	d2 80       	ldd	r13, Z+2	; 0x02
    103e:	dd 20       	and	r13, r13
    1040:	81 f1       	breq	.+96     	; 0x10a2 <qtm_key_sensors_process+0x71c>
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	50 e0       	ldi	r21, 0x00	; 0
    1046:	00 e0       	ldi	r16, 0x00	; 0
    1048:	10 e0       	ldi	r17, 0x00	; 0
    104a:	ea 81       	ldd	r30, Y+2	; 0x02
    104c:	fb 81       	ldd	r31, Y+3	; 0x03
    104e:	60 81       	ld	r22, Z
    1050:	71 81       	ldd	r23, Z+1	; 0x01
    1052:	06 17       	cp	r16, r22
    1054:	17 07       	cpc	r17, r23
    1056:	28 f5       	brcc	.+74     	; 0x10a2 <qtm_key_sensors_process+0x71c>
    1058:	ee 81       	ldd	r30, Y+6	; 0x06
    105a:	ff 81       	ldd	r31, Y+7	; 0x07
    105c:	e4 0f       	add	r30, r20
    105e:	f5 1f       	adc	r31, r21
    1060:	62 81       	ldd	r22, Z+2	; 0x02
    1062:	d6 12       	cpse	r13, r22
    1064:	19 c0       	rjmp	.+50     	; 0x1098 <qtm_key_sensors_process+0x712>
    1066:	ba 01       	movw	r22, r20
    1068:	66 0f       	add	r22, r22
    106a:	77 1f       	adc	r23, r23
    106c:	ec 81       	ldd	r30, Y+4	; 0x04
    106e:	fd 81       	ldd	r31, Y+5	; 0x05
    1070:	4f 01       	movw	r8, r30
    1072:	86 0e       	add	r8, r22
    1074:	97 1e       	adc	r9, r23
    1076:	f4 01       	movw	r30, r8
    1078:	e2 80       	ldd	r14, Z+2	; 0x02
    107a:	f3 80       	ldd	r15, Z+3	; 0x03
    107c:	f7 01       	movw	r30, r14
    107e:	f0 80       	ld	r15, Z
    1080:	f0 fe       	sbrs	r15, 0
    1082:	0a c0       	rjmp	.+20     	; 0x1098 <qtm_key_sensors_process+0x712>
    1084:	f4 01       	movw	r30, r8
    1086:	a0 82       	st	Z, r10
    1088:	ec 81       	ldd	r30, Y+4	; 0x04
    108a:	fd 81       	ldd	r31, Y+5	; 0x05
    108c:	e6 0f       	add	r30, r22
    108e:	f7 1f       	adc	r31, r23
    1090:	02 80       	ldd	r0, Z+2	; 0x02
    1092:	f3 81       	ldd	r31, Z+3	; 0x03
    1094:	e0 2d       	mov	r30, r0
    1096:	b0 82       	st	Z, r11
    1098:	0f 5f       	subi	r16, 0xFF	; 255
    109a:	1f 4f       	sbci	r17, 0xFF	; 255
    109c:	4d 5f       	subi	r20, 0xFD	; 253
    109e:	5f 4f       	sbci	r21, 0xFF	; 255
    10a0:	d4 cf       	rjmp	.-88     	; 0x104a <qtm_key_sensors_process+0x6c4>
    10a2:	11 96       	adiw	r26, 0x01	; 1
    10a4:	2d 5f       	subi	r18, 0xFD	; 253
    10a6:	3f 4f       	sbci	r19, 0xFF	; 255
    10a8:	34 cf       	rjmp	.-408    	; 0xf12 <qtm_key_sensors_process+0x58c>
    10aa:	8b e0       	ldi	r24, 0x0B	; 11
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	ef 90       	pop	r14
    10b8:	df 90       	pop	r13
    10ba:	cf 90       	pop	r12
    10bc:	bf 90       	pop	r11
    10be:	af 90       	pop	r10
    10c0:	9f 90       	pop	r9
    10c2:	8f 90       	pop	r8
    10c4:	7f 90       	pop	r7
    10c6:	6f 90       	pop	r6
    10c8:	5f 90       	pop	r5
    10ca:	4f 90       	pop	r4
    10cc:	3f 90       	pop	r3
    10ce:	2f 90       	pop	r2
    10d0:	08 95       	ret

000010d2 <select_next_channel_to_measure>:
    10d2:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <current_measure_channel>
    10d6:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <current_measure_channel+0x1>
    10da:	a0 91 5d 38 	lds	r26, 0x385D	; 0x80385d <qtm_acquisition_control_working_set_ptr>
    10de:	b0 91 5e 38 	lds	r27, 0x385E	; 0x80385e <qtm_acquisition_control_working_set_ptr+0x1>
    10e2:	ed 91       	ld	r30, X+
    10e4:	fc 91       	ld	r31, X
    10e6:	11 97       	sbiw	r26, 0x01	; 1
    10e8:	40 81       	ld	r20, Z
    10ea:	51 81       	ldd	r21, Z+1	; 0x01
    10ec:	25 e0       	ldi	r18, 0x05	; 5
    10ee:	28 9f       	mul	r18, r24
    10f0:	b0 01       	movw	r22, r0
    10f2:	29 9f       	mul	r18, r25
    10f4:	70 0d       	add	r23, r0
    10f6:	11 24       	eor	r1, r1
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	84 17       	cp	r24, r20
    10fe:	95 07       	cpc	r25, r21
    1100:	a8 f4       	brcc	.+42     	; 0x112c <select_next_channel_to_measure+0x5a>
    1102:	14 96       	adiw	r26, 0x04	; 4
    1104:	ed 91       	ld	r30, X+
    1106:	fc 91       	ld	r31, X
    1108:	15 97       	sbiw	r26, 0x05	; 5
    110a:	e2 0f       	add	r30, r18
    110c:	f3 1f       	adc	r31, r19
    110e:	e6 0f       	add	r30, r22
    1110:	f7 1f       	adc	r31, r23
    1112:	e0 81       	ld	r30, Z
    1114:	2b 5f       	subi	r18, 0xFB	; 251
    1116:	3f 4f       	sbci	r19, 0xFF	; 255
    1118:	e0 fd       	sbrc	r30, 0
    111a:	02 c0       	rjmp	.+4      	; 0x1120 <select_next_channel_to_measure+0x4e>
    111c:	01 96       	adiw	r24, 0x01	; 1
    111e:	ee cf       	rjmp	.-36     	; 0x10fc <select_next_channel_to_measure+0x2a>
    1120:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <current_measure_channel>
    1124:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <current_measure_channel+0x1>
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	08 95       	ret
    112c:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <current_measure_channel>
    1130:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <current_measure_channel+0x1>
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	08 95       	ret

00001138 <qtm_measure_node>:
    1138:	bc 01       	movw	r22, r24
    113a:	e0 91 5d 38 	lds	r30, 0x385D	; 0x80385d <qtm_acquisition_control_working_set_ptr>
    113e:	f0 91 5e 38 	lds	r31, 0x385E	; 0x80385e <qtm_acquisition_control_working_set_ptr+0x1>
    1142:	9c 01       	movw	r18, r24
    1144:	83 e0       	ldi	r24, 0x03	; 3
    1146:	22 0f       	add	r18, r18
    1148:	33 1f       	adc	r19, r19
    114a:	8a 95       	dec	r24
    114c:	e1 f7       	brne	.-8      	; 0x1146 <qtm_measure_node+0xe>
    114e:	a2 81       	ldd	r26, Z+2	; 0x02
    1150:	b3 81       	ldd	r27, Z+3	; 0x03
    1152:	a2 0f       	add	r26, r18
    1154:	b3 1f       	adc	r27, r19
    1156:	12 96       	adiw	r26, 0x02	; 2
    1158:	9c 91       	ld	r25, X
    115a:	12 97       	sbiw	r26, 0x02	; 2
    115c:	13 96       	adiw	r26, 0x03	; 3
    115e:	8c 91       	ld	r24, X
    1160:	90 93 2a 06 	sts	0x062A, r25	; 0x80062a <__TEXT_REGION_LENGTH__+0x70062a>
    1164:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <__TEXT_REGION_LENGTH__+0x70062b>
    1168:	a2 81       	ldd	r26, Z+2	; 0x02
    116a:	b3 81       	ldd	r27, Z+3	; 0x03
    116c:	a2 0f       	add	r26, r18
    116e:	b3 1f       	adc	r27, r19
    1170:	9c 91       	ld	r25, X
    1172:	11 96       	adiw	r26, 0x01	; 1
    1174:	8c 91       	ld	r24, X
    1176:	90 93 26 06 	sts	0x0626, r25	; 0x800626 <__TEXT_REGION_LENGTH__+0x700626>
    117a:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <__TEXT_REGION_LENGTH__+0x700627>
    117e:	95 e0       	ldi	r25, 0x05	; 5
    1180:	96 9f       	mul	r25, r22
    1182:	a0 01       	movw	r20, r0
    1184:	97 9f       	mul	r25, r23
    1186:	50 0d       	add	r21, r0
    1188:	11 24       	eor	r1, r1
    118a:	a4 81       	ldd	r26, Z+4	; 0x04
    118c:	b5 81       	ldd	r27, Z+5	; 0x05
    118e:	a4 0f       	add	r26, r20
    1190:	b5 1f       	adc	r27, r21
    1192:	13 96       	adiw	r26, 0x03	; 3
    1194:	8c 91       	ld	r24, X
    1196:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <__TEXT_REGION_LENGTH__+0x70061a>
    119a:	a4 81       	ldd	r26, Z+4	; 0x04
    119c:	b5 81       	ldd	r27, Z+5	; 0x05
    119e:	a4 0f       	add	r26, r20
    11a0:	b5 1f       	adc	r27, r21
    11a2:	14 96       	adiw	r26, 0x04	; 4
    11a4:	8c 91       	ld	r24, X
    11a6:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <__TEXT_REGION_LENGTH__+0x70061b>
    11aa:	a4 81       	ldd	r26, Z+4	; 0x04
    11ac:	b5 81       	ldd	r27, Z+5	; 0x05
    11ae:	a4 0f       	add	r26, r20
    11b0:	b5 1f       	adc	r27, r21
    11b2:	8c 91       	ld	r24, X
    11b4:	81 fd       	sbrc	r24, 1
    11b6:	9c 93       	st	X, r25
    11b8:	84 81       	ldd	r24, Z+4	; 0x04
    11ba:	95 81       	ldd	r25, Z+5	; 0x05
    11bc:	dc 01       	movw	r26, r24
    11be:	a4 0f       	add	r26, r20
    11c0:	b5 1f       	adc	r27, r21
    11c2:	8c 91       	ld	r24, X
    11c4:	8c 71       	andi	r24, 0x1C	; 28
    11c6:	69 f4       	brne	.+26     	; 0x11e2 <qtm_measure_node+0xaa>
    11c8:	a2 81       	ldd	r26, Z+2	; 0x02
    11ca:	b3 81       	ldd	r27, Z+3	; 0x03
    11cc:	a2 0f       	add	r26, r18
    11ce:	b3 1f       	adc	r27, r19
    11d0:	16 96       	adiw	r26, 0x06	; 6
    11d2:	ac 91       	ld	r26, X
    11d4:	a2 95       	swap	r26
    11d6:	af 70       	andi	r26, 0x0F	; 15
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	a4 55       	subi	r26, 0x54	; 84
    11dc:	b6 46       	sbci	r27, 0x66	; 102
    11de:	8c 91       	ld	r24, X
    11e0:	01 c0       	rjmp	.+2      	; 0x11e4 <qtm_measure_node+0xac>
    11e2:	8f e3       	ldi	r24, 0x3F	; 63
    11e4:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <__TEXT_REGION_LENGTH__+0x70061c>
    11e8:	a2 81       	ldd	r26, Z+2	; 0x02
    11ea:	b3 81       	ldd	r27, Z+3	; 0x03
    11ec:	a2 0f       	add	r26, r18
    11ee:	b3 1f       	adc	r27, r19
    11f0:	14 96       	adiw	r26, 0x04	; 4
    11f2:	8c 91       	ld	r24, X
    11f4:	8b 31       	cpi	r24, 0x1B	; 27
    11f6:	10 f4       	brcc	.+4      	; 0x11fc <qtm_measure_node+0xc4>
    11f8:	8c 5f       	subi	r24, 0xFC	; 252
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <qtm_measure_node+0xc6>
    11fc:	8f e1       	ldi	r24, 0x1F	; 31
    11fe:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    1202:	a2 81       	ldd	r26, Z+2	; 0x02
    1204:	b3 81       	ldd	r27, Z+3	; 0x03
    1206:	a2 0f       	add	r26, r18
    1208:	b3 1f       	adc	r27, r19
    120a:	17 96       	adiw	r26, 0x07	; 7
    120c:	8c 91       	ld	r24, X
    120e:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
    1212:	a2 81       	ldd	r26, Z+2	; 0x02
    1214:	b3 81       	ldd	r27, Z+3	; 0x03
    1216:	a2 0f       	add	r26, r18
    1218:	b3 1f       	adc	r27, r19
    121a:	15 96       	adiw	r26, 0x05	; 5
    121c:	8c 91       	ld	r24, X
    121e:	82 95       	swap	r24
    1220:	8f 70       	andi	r24, 0x0F	; 15
    1222:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <__TEXT_REGION_LENGTH__+0x700619>
    1226:	82 81       	ldd	r24, Z+2	; 0x02
    1228:	93 81       	ldd	r25, Z+3	; 0x03
    122a:	fc 01       	movw	r30, r24
    122c:	e2 0f       	add	r30, r18
    122e:	f3 1f       	adc	r31, r19
    1230:	85 81       	ldd	r24, Z+5	; 0x05
    1232:	8f 70       	andi	r24, 0x0F	; 15
    1234:	80 61       	ori	r24, 0x10	; 16
    1236:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
    123a:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    123e:	83 60       	ori	r24, 0x03	; 3
    1240:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    1244:	81 e8       	ldi	r24, 0x81	; 129
    1246:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
    1250:	08 95       	ret

00001252 <qtm_acquisition_process>:
    1252:	3f 92       	push	r3
    1254:	4f 92       	push	r4
    1256:	5f 92       	push	r5
    1258:	6f 92       	push	r6
    125a:	7f 92       	push	r7
    125c:	8f 92       	push	r8
    125e:	9f 92       	push	r9
    1260:	af 92       	push	r10
    1262:	bf 92       	push	r11
    1264:	cf 92       	push	r12
    1266:	df 92       	push	r13
    1268:	ef 92       	push	r14
    126a:	ff 92       	push	r15
    126c:	0f 93       	push	r16
    126e:	1f 93       	push	r17
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <touch_seq_lib_state>
    1278:	88 23       	and	r24, r24
    127a:	09 f4       	brne	.+2      	; 0x127e <qtm_acquisition_process+0x2c>
    127c:	48 c1       	rjmp	.+656    	; 0x150e <qtm_acquisition_process+0x2bc>
    127e:	a0 91 5d 38 	lds	r26, 0x385D	; 0x80385d <qtm_acquisition_control_working_set_ptr>
    1282:	b0 91 5e 38 	lds	r27, 0x385E	; 0x80385e <qtm_acquisition_control_working_set_ptr+0x1>
    1286:	c0 90 5f 38 	lds	r12, 0x385F	; 0x80385f <qtm_raw_data_measurements_ptr>
    128a:	d0 90 60 38 	lds	r13, 0x3860	; 0x803860 <qtm_raw_data_measurements_ptr+0x1>
    128e:	00 e0       	ldi	r16, 0x00	; 0
    1290:	10 e0       	ldi	r17, 0x00	; 0
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	e1 2c       	mov	r14, r1
    1298:	f1 2c       	mov	r15, r1
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	33 24       	eor	r3, r3
    129e:	33 94       	inc	r3
    12a0:	d1 e8       	ldi	r29, 0x81	; 129
    12a2:	4d 2e       	mov	r4, r29
    12a4:	88 24       	eor	r8, r8
    12a6:	8a 94       	dec	r8
    12a8:	99 24       	eor	r9, r9
    12aa:	93 94       	inc	r9
    12ac:	6d 90       	ld	r6, X+
    12ae:	7c 90       	ld	r7, X
    12b0:	11 97       	sbiw	r26, 0x01	; 1
    12b2:	f3 01       	movw	r30, r6
    12b4:	20 81       	ld	r18, Z
    12b6:	31 81       	ldd	r19, Z+1	; 0x01
    12b8:	e2 16       	cp	r14, r18
    12ba:	f3 06       	cpc	r15, r19
    12bc:	08 f0       	brcs	.+2      	; 0x12c0 <qtm_acquisition_process+0x6e>
    12be:	23 c1       	rjmp	.+582    	; 0x1506 <qtm_acquisition_process+0x2b4>
    12c0:	e6 01       	movw	r28, r12
    12c2:	29 91       	ld	r18, Y+
    12c4:	39 91       	ld	r19, Y+
    12c6:	6e 01       	movw	r12, r28
    12c8:	14 96       	adiw	r26, 0x04	; 4
    12ca:	ed 91       	ld	r30, X+
    12cc:	fc 91       	ld	r31, X
    12ce:	15 97       	sbiw	r26, 0x05	; 5
    12d0:	e6 0f       	add	r30, r22
    12d2:	f7 1f       	adc	r31, r23
    12d4:	40 81       	ld	r20, Z
    12d6:	4c 71       	andi	r20, 0x1C	; 28
    12d8:	50 e0       	ldi	r21, 0x00	; 0
    12da:	56 95       	lsr	r21
    12dc:	47 95       	ror	r20
    12de:	56 95       	lsr	r21
    12e0:	47 95       	ror	r20
    12e2:	41 15       	cp	r20, r1
    12e4:	51 05       	cpc	r21, r1
    12e6:	21 f0       	breq	.+8      	; 0x12f0 <qtm_acquisition_process+0x9e>
    12e8:	41 30       	cpi	r20, 0x01	; 1
    12ea:	51 05       	cpc	r21, r1
    12ec:	b9 f0       	breq	.+46     	; 0x131c <qtm_acquisition_process+0xca>
    12ee:	02 c1       	rjmp	.+516    	; 0x14f4 <qtm_acquisition_process+0x2a2>
    12f0:	12 96       	adiw	r26, 0x02	; 2
    12f2:	cd 91       	ld	r28, X+
    12f4:	dc 91       	ld	r29, X
    12f6:	13 97       	sbiw	r26, 0x03	; 3
    12f8:	c0 0f       	add	r28, r16
    12fa:	d1 1f       	adc	r29, r17
    12fc:	4e 81       	ldd	r20, Y+6	; 0x06
    12fe:	4f 70       	andi	r20, 0x0F	; 15
    1300:	9f 81       	ldd	r25, Y+7	; 0x07
    1302:	49 17       	cp	r20, r25
    1304:	10 f4       	brcc	.+4      	; 0x130a <qtm_acquisition_process+0xb8>
    1306:	94 1b       	sub	r25, r20
    1308:	01 c0       	rjmp	.+2      	; 0x130c <qtm_acquisition_process+0xba>
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <qtm_acquisition_process+0xc0>
    130e:	36 95       	lsr	r19
    1310:	27 95       	ror	r18
    1312:	9a 95       	dec	r25
    1314:	e2 f7       	brpl	.-8      	; 0x130e <qtm_acquisition_process+0xbc>
    1316:	21 83       	std	Z+1, r18	; 0x01
    1318:	32 83       	std	Z+2, r19	; 0x02
    131a:	ed c0       	rjmp	.+474    	; 0x14f6 <qtm_acquisition_process+0x2a4>
    131c:	12 96       	adiw	r26, 0x02	; 2
    131e:	4d 91       	ld	r20, X+
    1320:	5c 91       	ld	r21, X
    1322:	13 97       	sbiw	r26, 0x03	; 3
    1324:	40 0f       	add	r20, r16
    1326:	51 1f       	adc	r21, r17
    1328:	ea 01       	movw	r28, r20
    132a:	0f 80       	ldd	r0, Y+7	; 0x07
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <qtm_acquisition_process+0xe0>
    132e:	36 95       	lsr	r19
    1330:	27 95       	ror	r18
    1332:	0a 94       	dec	r0
    1334:	e2 f7       	brpl	.-8      	; 0x132e <qtm_acquisition_process+0xdc>
    1336:	21 83       	std	Z+1, r18	; 0x01
    1338:	32 83       	std	Z+2, r19	; 0x02
    133a:	a3 80       	ldd	r10, Z+3	; 0x03
    133c:	b4 80       	ldd	r11, Z+4	; 0x04
    133e:	21 15       	cp	r18, r1
    1340:	d2 e0       	ldi	r29, 0x02	; 2
    1342:	3d 07       	cpc	r19, r29
    1344:	20 f0       	brcs	.+8      	; 0x134e <qtm_acquisition_process+0xfc>
    1346:	2f 5f       	subi	r18, 0xFF	; 255
    1348:	31 40       	sbci	r19, 0x01	; 1
    134a:	91 e0       	ldi	r25, 0x01	; 1
    134c:	05 c0       	rjmp	.+10     	; 0x1358 <qtm_acquisition_process+0x106>
    134e:	a4 01       	movw	r20, r8
    1350:	42 1b       	sub	r20, r18
    1352:	53 0b       	sbc	r21, r19
    1354:	9a 01       	movw	r18, r20
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	e3 01       	movw	r28, r6
    135a:	5a 80       	ldd	r5, Y+2	; 0x02
    135c:	d0 e4       	ldi	r29, 0x40	; 64
    135e:	5d 12       	cpse	r5, r29
    1360:	05 c0       	rjmp	.+10     	; 0x136c <qtm_acquisition_process+0x11a>
    1362:	36 95       	lsr	r19
    1364:	27 95       	ror	r18
    1366:	99 23       	and	r25, r25
    1368:	19 f0       	breq	.+6      	; 0x1370 <qtm_acquisition_process+0x11e>
    136a:	09 c0       	rjmp	.+18     	; 0x137e <qtm_acquisition_process+0x12c>
    136c:	99 23       	and	r25, r25
    136e:	39 f0       	breq	.+14     	; 0x137e <qtm_acquisition_process+0x12c>
    1370:	4f ef       	ldi	r20, 0xFF	; 255
    1372:	a4 16       	cp	r10, r20
    1374:	b4 06       	cpc	r11, r20
    1376:	31 f4       	brne	.+12     	; 0x1384 <qtm_acquisition_process+0x132>
    1378:	40 82       	st	Z, r4
    137a:	8e e0       	ldi	r24, 0x0E	; 14
    137c:	07 c0       	rjmp	.+14     	; 0x138c <qtm_acquisition_process+0x13a>
    137e:	77 24       	eor	r7, r7
    1380:	73 94       	inc	r7
    1382:	01 c0       	rjmp	.+2      	; 0x1386 <qtm_acquisition_process+0x134>
    1384:	71 2c       	mov	r7, r1
    1386:	2a 30       	cpi	r18, 0x0A	; 10
    1388:	31 05       	cpc	r19, r1
    138a:	90 f4       	brcc	.+36     	; 0x13b0 <qtm_acquisition_process+0x15e>
    138c:	14 96       	adiw	r26, 0x04	; 4
    138e:	ed 91       	ld	r30, X+
    1390:	fc 91       	ld	r31, X
    1392:	15 97       	sbiw	r26, 0x05	; 5
    1394:	e6 0f       	add	r30, r22
    1396:	f7 1f       	adc	r31, r23
    1398:	90 81       	ld	r25, Z
    139a:	97 ff       	sbrs	r25, 7
    139c:	30 82       	st	Z, r3
    139e:	14 96       	adiw	r26, 0x04	; 4
    13a0:	ed 91       	ld	r30, X+
    13a2:	fc 91       	ld	r31, X
    13a4:	15 97       	sbiw	r26, 0x05	; 5
    13a6:	e6 0f       	add	r30, r22
    13a8:	f7 1f       	adc	r31, r23
    13aa:	a3 82       	std	Z+3, r10	; 0x03
    13ac:	b4 82       	std	Z+4, r11	; 0x04
    13ae:	a3 c0       	rjmp	.+326    	; 0x14f6 <qtm_acquisition_process+0x2a4>
    13b0:	e5 01       	movw	r28, r10
    13b2:	cd 2f       	mov	r28, r29
    13b4:	dd 27       	eor	r29, r29
    13b6:	c2 95       	swap	r28
    13b8:	cf 70       	andi	r28, 0x0F	; 15
    13ba:	9c 2f       	mov	r25, r28
    13bc:	a5 01       	movw	r20, r10
    13be:	44 27       	eor	r20, r20
    13c0:	5f 70       	andi	r21, 0x0F	; 15
    13c2:	65 2e       	mov	r6, r21
    13c4:	a5 01       	movw	r20, r10
    13c6:	40 7f       	andi	r20, 0xF0	; 240
    13c8:	55 27       	eor	r21, r21
    13ca:	52 95       	swap	r21
    13cc:	42 95       	swap	r20
    13ce:	4f 70       	andi	r20, 0x0F	; 15
    13d0:	45 27       	eor	r20, r21
    13d2:	5f 70       	andi	r21, 0x0F	; 15
    13d4:	45 27       	eor	r20, r21
    13d6:	5a 2d       	mov	r21, r10
    13d8:	5f 70       	andi	r21, 0x0F	; 15
    13da:	a5 2e       	mov	r10, r21
    13dc:	c4 30       	cpi	r28, 0x04	; 4
    13de:	30 f0       	brcs	.+12     	; 0x13ec <qtm_acquisition_process+0x19a>
    13e0:	93 70       	andi	r25, 0x03	; 3
    13e2:	d6 95       	lsr	r29
    13e4:	c7 95       	ror	r28
    13e6:	d6 95       	lsr	r29
    13e8:	c7 95       	ror	r28
    13ea:	9c 0f       	add	r25, r28
    13ec:	71 10       	cpse	r7, r1
    13ee:	3c c0       	rjmp	.+120    	; 0x1468 <qtm_acquisition_process+0x216>
    13f0:	50 e8       	ldi	r21, 0x80	; 128
    13f2:	55 0d       	add	r21, r5
    13f4:	52 30       	cpi	r21, 0x02	; 2
    13f6:	10 f4       	brcc	.+4      	; 0x13fc <qtm_acquisition_process+0x1aa>
    13f8:	56 e0       	ldi	r21, 0x06	; 6
    13fa:	07 c0       	rjmp	.+14     	; 0x140a <qtm_acquisition_process+0x1b8>
    13fc:	53 e0       	ldi	r21, 0x03	; 3
    13fe:	05 c0       	rjmp	.+10     	; 0x140a <qtm_acquisition_process+0x1b8>
    1400:	95 17       	cp	r25, r21
    1402:	68 f4       	brcc	.+26     	; 0x141e <qtm_acquisition_process+0x1cc>
    1404:	9f 5f       	subi	r25, 0xFF	; 255
    1406:	2f 5c       	subi	r18, 0xCF	; 207
    1408:	31 09       	sbc	r19, r1
    140a:	20 3d       	cpi	r18, 0xD0	; 208
    140c:	31 05       	cpc	r19, r1
    140e:	c0 f7       	brcc	.-16     	; 0x1400 <qtm_acquisition_process+0x1ae>
    1410:	06 c0       	rjmp	.+12     	; 0x141e <qtm_acquisition_process+0x1cc>
    1412:	cf e0       	ldi	r28, 0x0F	; 15
    1414:	6c 16       	cp	r6, r28
    1416:	49 f0       	breq	.+18     	; 0x142a <qtm_acquisition_process+0x1d8>
    1418:	63 94       	inc	r6
    141a:	25 51       	subi	r18, 0x15	; 21
    141c:	31 09       	sbc	r19, r1
    141e:	26 31       	cpi	r18, 0x16	; 22
    1420:	31 05       	cpc	r19, r1
    1422:	b8 f7       	brcc	.-18     	; 0x1412 <qtm_acquisition_process+0x1c0>
    1424:	df e0       	ldi	r29, 0x0F	; 15
    1426:	6d 12       	cpse	r6, r29
    1428:	0e c0       	rjmp	.+28     	; 0x1446 <qtm_acquisition_process+0x1f4>
    142a:	95 17       	cp	r25, r21
    142c:	20 f4       	brcc	.+8      	; 0x1436 <qtm_acquisition_process+0x1e4>
    142e:	9f 5f       	subi	r25, 0xFF	; 255
    1430:	d5 e0       	ldi	r29, 0x05	; 5
    1432:	6d 2e       	mov	r6, r29
    1434:	08 c0       	rjmp	.+16     	; 0x1446 <qtm_acquisition_process+0x1f4>
    1436:	cf e0       	ldi	r28, 0x0F	; 15
    1438:	6c 2e       	mov	r6, r28
    143a:	05 c0       	rjmp	.+10     	; 0x1446 <qtm_acquisition_process+0x1f4>
    143c:	4f 30       	cpi	r20, 0x0F	; 15
    143e:	49 f0       	breq	.+18     	; 0x1452 <qtm_acquisition_process+0x200>
    1440:	4f 5f       	subi	r20, 0xFF	; 255
    1442:	22 50       	subi	r18, 0x02	; 2
    1444:	31 09       	sbc	r19, r1
    1446:	23 30       	cpi	r18, 0x03	; 3
    1448:	31 05       	cpc	r19, r1
    144a:	c0 f7       	brcc	.-16     	; 0x143c <qtm_acquisition_process+0x1ea>
    144c:	4f 30       	cpi	r20, 0x0F	; 15
    144e:	09 f0       	breq	.+2      	; 0x1452 <qtm_acquisition_process+0x200>
    1450:	65 c0       	rjmp	.+202    	; 0x151c <qtm_acquisition_process+0x2ca>
    1452:	4f e0       	ldi	r20, 0x0F	; 15
    1454:	64 16       	cp	r6, r20
    1456:	81 f1       	breq	.+96     	; 0x14b8 <qtm_acquisition_process+0x266>
    1458:	63 94       	inc	r6
    145a:	45 e0       	ldi	r20, 0x05	; 5
    145c:	5f c0       	rjmp	.+190    	; 0x151c <qtm_acquisition_process+0x2ca>
    145e:	99 23       	and	r25, r25
    1460:	61 f0       	breq	.+24     	; 0x147a <qtm_acquisition_process+0x228>
    1462:	91 50       	subi	r25, 0x01	; 1
    1464:	2f 5c       	subi	r18, 0xCF	; 207
    1466:	31 09       	sbc	r19, r1
    1468:	20 3d       	cpi	r18, 0xD0	; 208
    146a:	31 05       	cpc	r19, r1
    146c:	c0 f7       	brcc	.-16     	; 0x145e <qtm_acquisition_process+0x20c>
    146e:	05 c0       	rjmp	.+10     	; 0x147a <qtm_acquisition_process+0x228>
    1470:	66 20       	and	r6, r6
    1472:	41 f0       	breq	.+16     	; 0x1484 <qtm_acquisition_process+0x232>
    1474:	6a 94       	dec	r6
    1476:	25 51       	subi	r18, 0x15	; 21
    1478:	31 09       	sbc	r19, r1
    147a:	26 31       	cpi	r18, 0x16	; 22
    147c:	31 05       	cpc	r19, r1
    147e:	c0 f7       	brcc	.-16     	; 0x1470 <qtm_acquisition_process+0x21e>
    1480:	61 10       	cpse	r6, r1
    1482:	0d c0       	rjmp	.+26     	; 0x149e <qtm_acquisition_process+0x24c>
    1484:	99 23       	and	r25, r25
    1486:	21 f0       	breq	.+8      	; 0x1490 <qtm_acquisition_process+0x23e>
    1488:	91 50       	subi	r25, 0x01	; 1
    148a:	5a e0       	ldi	r21, 0x0A	; 10
    148c:	65 2e       	mov	r6, r21
    148e:	07 c0       	rjmp	.+14     	; 0x149e <qtm_acquisition_process+0x24c>
    1490:	61 2c       	mov	r6, r1
    1492:	05 c0       	rjmp	.+10     	; 0x149e <qtm_acquisition_process+0x24c>
    1494:	44 23       	and	r20, r20
    1496:	41 f0       	breq	.+16     	; 0x14a8 <qtm_acquisition_process+0x256>
    1498:	41 50       	subi	r20, 0x01	; 1
    149a:	22 50       	subi	r18, 0x02	; 2
    149c:	31 09       	sbc	r19, r1
    149e:	23 30       	cpi	r18, 0x03	; 3
    14a0:	31 05       	cpc	r19, r1
    14a2:	c0 f7       	brcc	.-16     	; 0x1494 <qtm_acquisition_process+0x242>
    14a4:	41 11       	cpse	r20, r1
    14a6:	10 c0       	rjmp	.+32     	; 0x14c8 <qtm_acquisition_process+0x276>
    14a8:	66 20       	and	r6, r6
    14aa:	e9 f1       	breq	.+122    	; 0x1526 <qtm_acquisition_process+0x2d4>
    14ac:	6a 94       	dec	r6
    14ae:	4a e0       	ldi	r20, 0x0A	; 10
    14b0:	23 30       	cpi	r18, 0x03	; 3
    14b2:	31 05       	cpc	r19, r1
    14b4:	c8 f6       	brcc	.-78     	; 0x1468 <qtm_acquisition_process+0x216>
    14b6:	08 c0       	rjmp	.+16     	; 0x14c8 <qtm_acquisition_process+0x276>
    14b8:	59 13       	cpse	r21, r25
    14ba:	2f c0       	rjmp	.+94     	; 0x151a <qtm_acquisition_process+0x2c8>
    14bc:	23 30       	cpi	r18, 0x03	; 3
    14be:	31 05       	cpc	r19, r1
    14c0:	40 f1       	brcs	.+80     	; 0x1512 <qtm_acquisition_process+0x2c0>
    14c2:	4f e0       	ldi	r20, 0x0F	; 15
    14c4:	a4 2e       	mov	r10, r20
    14c6:	4f e0       	ldi	r20, 0x0F	; 15
    14c8:	94 30       	cpi	r25, 0x04	; 4
    14ca:	18 f0       	brcs	.+6      	; 0x14d2 <qtm_acquisition_process+0x280>
    14cc:	99 0f       	add	r25, r25
    14ce:	99 0f       	add	r25, r25
    14d0:	99 50       	subi	r25, 0x09	; 9
    14d2:	c0 e1       	ldi	r28, 0x10	; 16
    14d4:	4c 9f       	mul	r20, r28
    14d6:	a0 01       	movw	r20, r0
    14d8:	11 24       	eor	r1, r1
    14da:	56 29       	or	r21, r6
    14dc:	4a 29       	or	r20, r10
    14de:	c9 2f       	mov	r28, r25
    14e0:	d0 e0       	ldi	r29, 0x00	; 0
    14e2:	dc 2f       	mov	r29, r28
    14e4:	cc 27       	eor	r28, r28
    14e6:	d2 95       	swap	r29
    14e8:	d0 7f       	andi	r29, 0xF0	; 240
    14ea:	4c 2b       	or	r20, r28
    14ec:	5d 2b       	or	r21, r29
    14ee:	43 83       	std	Z+3, r20	; 0x03
    14f0:	54 83       	std	Z+4, r21	; 0x04
    14f2:	01 c0       	rjmp	.+2      	; 0x14f6 <qtm_acquisition_process+0x2a4>
    14f4:	ff cf       	rjmp	.-2      	; 0x14f4 <qtm_acquisition_process+0x2a2>
    14f6:	df ef       	ldi	r29, 0xFF	; 255
    14f8:	ed 1a       	sub	r14, r29
    14fa:	fd 0a       	sbc	r15, r29
    14fc:	6b 5f       	subi	r22, 0xFB	; 251
    14fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1500:	08 5f       	subi	r16, 0xF8	; 248
    1502:	1f 4f       	sbci	r17, 0xFF	; 255
    1504:	d3 ce       	rjmp	.-602    	; 0x12ac <qtm_acquisition_process+0x5a>
    1506:	92 e0       	ldi	r25, 0x02	; 2
    1508:	90 93 3a 38 	sts	0x383A, r25	; 0x80383a <touch_seq_lib_state>
    150c:	0e c0       	rjmp	.+28     	; 0x152a <qtm_acquisition_process+0x2d8>
    150e:	83 e0       	ldi	r24, 0x03	; 3
    1510:	0c c0       	rjmp	.+24     	; 0x152a <qtm_acquisition_process+0x2d8>
    1512:	4f e0       	ldi	r20, 0x0F	; 15
    1514:	2f e0       	ldi	r18, 0x0F	; 15
    1516:	a2 2e       	mov	r10, r18
    1518:	d7 cf       	rjmp	.-82     	; 0x14c8 <qtm_acquisition_process+0x276>
    151a:	4f e0       	ldi	r20, 0x0F	; 15
    151c:	23 30       	cpi	r18, 0x03	; 3
    151e:	31 05       	cpc	r19, r1
    1520:	08 f0       	brcs	.+2      	; 0x1524 <qtm_acquisition_process+0x2d2>
    1522:	73 cf       	rjmp	.-282    	; 0x140a <qtm_acquisition_process+0x1b8>
    1524:	d1 cf       	rjmp	.-94     	; 0x14c8 <qtm_acquisition_process+0x276>
    1526:	40 e0       	ldi	r20, 0x00	; 0
    1528:	cf cf       	rjmp	.-98     	; 0x14c8 <qtm_acquisition_process+0x276>
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	ff 90       	pop	r15
    1534:	ef 90       	pop	r14
    1536:	df 90       	pop	r13
    1538:	cf 90       	pop	r12
    153a:	bf 90       	pop	r11
    153c:	af 90       	pop	r10
    153e:	9f 90       	pop	r9
    1540:	8f 90       	pop	r8
    1542:	7f 90       	pop	r7
    1544:	6f 90       	pop	r6
    1546:	5f 90       	pop	r5
    1548:	4f 90       	pop	r4
    154a:	3f 90       	pop	r3
    154c:	08 95       	ret

0000154e <qtm_ptc_init_acquisition_module>:
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	e1 f1       	breq	.+120    	; 0x15ce <qtm_ptc_init_acquisition_module+0x80>
    1556:	dc 01       	movw	r26, r24
    1558:	ed 91       	ld	r30, X+
    155a:	fc 91       	ld	r31, X
    155c:	a0 81       	ld	r26, Z
    155e:	b1 81       	ldd	r27, Z+1	; 0x01
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	40 e0       	ldi	r20, 0x00	; 0
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	4a 17       	cp	r20, r26
    156e:	5b 07       	cpc	r21, r27
    1570:	99 f0       	breq	.+38     	; 0x1598 <qtm_ptc_init_acquisition_module+0x4a>
    1572:	ec 01       	movw	r28, r24
    1574:	ea 81       	ldd	r30, Y+2	; 0x02
    1576:	fb 81       	ldd	r31, Y+3	; 0x03
    1578:	e6 0f       	add	r30, r22
    157a:	f7 1f       	adc	r31, r23
    157c:	c0 81       	ld	r28, Z
    157e:	d1 81       	ldd	r29, Z+1	; 0x01
    1580:	02 80       	ldd	r0, Z+2	; 0x02
    1582:	f3 81       	ldd	r31, Z+3	; 0x03
    1584:	e0 2d       	mov	r30, r0
    1586:	ec 2b       	or	r30, r28
    1588:	fd 2b       	or	r31, r29
    158a:	2e 2b       	or	r18, r30
    158c:	3f 2b       	or	r19, r31
    158e:	4f 5f       	subi	r20, 0xFF	; 255
    1590:	5f 4f       	sbci	r21, 0xFF	; 255
    1592:	68 5f       	subi	r22, 0xF8	; 248
    1594:	7f 4f       	sbci	r23, 0xFF	; 255
    1596:	ea cf       	rjmp	.-44     	; 0x156c <qtm_ptc_init_acquisition_module+0x1e>
    1598:	21 15       	cp	r18, r1
    159a:	31 05       	cpc	r19, r1
    159c:	d1 f0       	breq	.+52     	; 0x15d2 <qtm_ptc_init_acquisition_module+0x84>
    159e:	80 91 3a 38 	lds	r24, 0x383A	; 0x80383a <touch_seq_lib_state>
    15a2:	81 11       	cpse	r24, r1
    15a4:	08 c0       	rjmp	.+16     	; 0x15b6 <qtm_ptc_init_acquisition_module+0x68>
    15a6:	20 93 22 06 	sts	0x0622, r18	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
    15aa:	30 93 23 06 	sts	0x0623, r19	; 0x800623 <__TEXT_REGION_LENGTH__+0x700623>
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <touch_seq_lib_state>
    15b4:	0a c0       	rjmp	.+20     	; 0x15ca <qtm_ptc_init_acquisition_module+0x7c>
    15b6:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
    15ba:	82 2b       	or	r24, r18
    15bc:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <__TEXT_REGION_LENGTH__+0x700622>
    15c0:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <__TEXT_REGION_LENGTH__+0x700623>
    15c4:	83 2b       	or	r24, r19
    15c6:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <__TEXT_REGION_LENGTH__+0x700623>
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	03 c0       	rjmp	.+6      	; 0x15d4 <qtm_ptc_init_acquisition_module+0x86>
    15ce:	8b e0       	ldi	r24, 0x0B	; 11
    15d0:	01 c0       	rjmp	.+2      	; 0x15d4 <qtm_ptc_init_acquisition_module+0x86>
    15d2:	82 e0       	ldi	r24, 0x02	; 2
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	08 95       	ret

000015da <qtm_ptc_qtlib_assign_signal_memory>:
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	31 f0       	breq	.+12     	; 0x15ea <qtm_ptc_qtlib_assign_signal_memory+0x10>
    15de:	80 93 5f 38 	sts	0x385F, r24	; 0x80385f <qtm_raw_data_measurements_ptr>
    15e2:	90 93 60 38 	sts	0x3860, r25	; 0x803860 <qtm_raw_data_measurements_ptr+0x1>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	08 95       	ret
    15ea:	8b e0       	ldi	r24, 0x0B	; 11
    15ec:	08 95       	ret

000015ee <qtm_ptc_start_measurement_seq>:
    15ee:	61 15       	cp	r22, r1
    15f0:	71 05       	cpc	r23, r1
    15f2:	91 f1       	breq	.+100    	; 0x1658 <qtm_ptc_start_measurement_seq+0x6a>
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	81 f1       	breq	.+96     	; 0x1658 <qtm_ptc_start_measurement_seq+0x6a>
    15f8:	20 91 3a 38 	lds	r18, 0x383A	; 0x80383a <touch_seq_lib_state>
    15fc:	22 23       	and	r18, r18
    15fe:	71 f1       	breq	.+92     	; 0x165c <qtm_ptc_start_measurement_seq+0x6e>
    1600:	24 30       	cpi	r18, 0x04	; 4
    1602:	71 f1       	breq	.+92     	; 0x1660 <qtm_ptc_start_measurement_seq+0x72>
    1604:	80 93 5d 38 	sts	0x385D, r24	; 0x80385d <qtm_acquisition_control_working_set_ptr>
    1608:	90 93 5e 38 	sts	0x385E, r25	; 0x80385e <qtm_acquisition_control_working_set_ptr+0x1>
    160c:	60 93 38 38 	sts	0x3838, r22	; 0x803838 <ptc_seq_measure_complete_pointer>
    1610:	70 93 39 38 	sts	0x3839, r23	; 0x803839 <ptc_seq_measure_complete_pointer+0x1>
    1614:	20 ec       	ldi	r18, 0xC0	; 192
    1616:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    161a:	dc 01       	movw	r26, r24
    161c:	ed 91       	ld	r30, X+
    161e:	fc 91       	ld	r31, X
    1620:	22 81       	ldd	r18, Z+2	; 0x02
    1622:	20 34       	cpi	r18, 0x40	; 64
    1624:	21 f4       	brne	.+8      	; 0x162e <qtm_ptc_start_measurement_seq+0x40>
    1626:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    162a:	20 62       	ori	r18, 0x20	; 32
    162c:	05 c0       	rjmp	.+10     	; 0x1638 <qtm_ptc_start_measurement_seq+0x4a>
    162e:	20 38       	cpi	r18, 0x80	; 128
    1630:	41 f4       	brne	.+16     	; 0x1642 <qtm_ptc_start_measurement_seq+0x54>
    1632:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    1636:	28 62       	ori	r18, 0x28	; 40
    1638:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    163c:	10 92 1e 06 	sts	0x061E, r1	; 0x80061e <__TEXT_REGION_LENGTH__+0x70061e>
    1640:	13 c0       	rjmp	.+38     	; 0x1668 <qtm_ptc_start_measurement_seq+0x7a>
    1642:	21 38       	cpi	r18, 0x81	; 129
    1644:	79 f4       	brne	.+30     	; 0x1664 <qtm_ptc_start_measurement_seq+0x76>
    1646:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    164a:	28 62       	ori	r18, 0x28	; 40
    164c:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <__TEXT_REGION_LENGTH__+0x700618>
    1650:	26 e8       	ldi	r18, 0x86	; 134
    1652:	20 93 1e 06 	sts	0x061E, r18	; 0x80061e <__TEXT_REGION_LENGTH__+0x70061e>
    1656:	08 c0       	rjmp	.+16     	; 0x1668 <qtm_ptc_start_measurement_seq+0x7a>
    1658:	8b e0       	ldi	r24, 0x0B	; 11
    165a:	08 95       	ret
    165c:	83 e0       	ldi	r24, 0x03	; 3
    165e:	08 95       	ret
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	08 95       	ret
    1664:	82 e0       	ldi	r24, 0x02	; 2
    1666:	08 95       	ret
    1668:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    166c:	dc 01       	movw	r26, r24
    166e:	ed 91       	ld	r30, X+
    1670:	fc 91       	ld	r31, X
    1672:	84 81       	ldd	r24, Z+4	; 0x04
    1674:	80 31       	cpi	r24, 0x10	; 16
    1676:	08 f0       	brcs	.+2      	; 0x167a <qtm_ptc_start_measurement_seq+0x8c>
    1678:	80 e1       	ldi	r24, 0x10	; 16
    167a:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <__TEXT_REGION_LENGTH__+0x700603>
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <__TEXT_REGION_LENGTH__+0x70060b>
    1684:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
    1688:	80 93 2d 38 	sts	0x382D, r24	; 0x80382d <qtm_which_mode_current>
    168c:	10 92 3b 38 	sts	0x383B, r1	; 0x80383b <current_measure_channel>
    1690:	10 92 3c 38 	sts	0x383C, r1	; 0x80383c <current_measure_channel+0x1>
    1694:	0e 94 69 08 	call	0x10d2	; 0x10d2 <select_next_channel_to_measure>
    1698:	81 11       	cpse	r24, r1
    169a:	0b c0       	rjmp	.+22     	; 0x16b2 <qtm_ptc_start_measurement_seq+0xc4>
    169c:	84 e0       	ldi	r24, 0x04	; 4
    169e:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <touch_seq_lib_state>
    16a2:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <current_measure_channel>
    16a6:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <current_measure_channel+0x1>
    16aa:	0e 94 9c 08 	call	0x1138	; 0x1138 <qtm_measure_node>
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	08 95       	ret
    16b2:	82 e0       	ldi	r24, 0x02	; 2
    16b4:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <touch_seq_lib_state>
    16b8:	08 95       	ret

000016ba <qtm_enable_sensor_node>:
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	c9 f0       	breq	.+50     	; 0x16f0 <qtm_enable_sensor_node+0x36>
    16be:	dc 01       	movw	r26, r24
    16c0:	ed 91       	ld	r30, X+
    16c2:	fc 91       	ld	r31, X
    16c4:	11 97       	sbiw	r26, 0x01	; 1
    16c6:	20 81       	ld	r18, Z
    16c8:	31 81       	ldd	r19, Z+1	; 0x01
    16ca:	26 17       	cp	r18, r22
    16cc:	37 07       	cpc	r19, r23
    16ce:	90 f0       	brcs	.+36     	; 0x16f4 <qtm_enable_sensor_node+0x3a>
    16d0:	45 e0       	ldi	r20, 0x05	; 5
    16d2:	46 9f       	mul	r20, r22
    16d4:	90 01       	movw	r18, r0
    16d6:	47 9f       	mul	r20, r23
    16d8:	30 0d       	add	r19, r0
    16da:	11 24       	eor	r1, r1
    16dc:	14 96       	adiw	r26, 0x04	; 4
    16de:	ed 91       	ld	r30, X+
    16e0:	fc 91       	ld	r31, X
    16e2:	15 97       	sbiw	r26, 0x05	; 5
    16e4:	e2 0f       	add	r30, r18
    16e6:	f3 1f       	adc	r31, r19
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	80 83       	st	Z, r24
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	08 95       	ret
    16f0:	8b e0       	ldi	r24, 0x0B	; 11
    16f2:	08 95       	ret
    16f4:	82 e0       	ldi	r24, 0x02	; 2
    16f6:	08 95       	ret

000016f8 <qtm_calibrate_sensor_node>:
    16f8:	fc 01       	movw	r30, r24
    16fa:	89 2b       	or	r24, r25
    16fc:	d1 f1       	breq	.+116    	; 0x1772 <qtm_calibrate_sensor_node+0x7a>
    16fe:	a0 81       	ld	r26, Z
    1700:	b1 81       	ldd	r27, Z+1	; 0x01
    1702:	8d 91       	ld	r24, X+
    1704:	9c 91       	ld	r25, X
    1706:	11 97       	sbiw	r26, 0x01	; 1
    1708:	86 17       	cp	r24, r22
    170a:	97 07       	cpc	r25, r23
    170c:	a0 f1       	brcs	.+104    	; 0x1776 <qtm_calibrate_sensor_node+0x7e>
    170e:	12 96       	adiw	r26, 0x02	; 2
    1710:	9c 91       	ld	r25, X
    1712:	04 80       	ldd	r0, Z+4	; 0x04
    1714:	f5 81       	ldd	r31, Z+5	; 0x05
    1716:	e0 2d       	mov	r30, r0
    1718:	90 34       	cpi	r25, 0x40	; 64
    171a:	59 f4       	brne	.+22     	; 0x1732 <qtm_calibrate_sensor_node+0x3a>
    171c:	85 e0       	ldi	r24, 0x05	; 5
    171e:	86 9f       	mul	r24, r22
    1720:	d0 01       	movw	r26, r0
    1722:	87 9f       	mul	r24, r23
    1724:	b0 0d       	add	r27, r0
    1726:	11 24       	eor	r1, r1
    1728:	ae 0f       	add	r26, r30
    172a:	bf 1f       	adc	r27, r31
    172c:	84 e3       	ldi	r24, 0x34	; 52
    172e:	92 e0       	ldi	r25, 0x02	; 2
    1730:	0d c0       	rjmp	.+26     	; 0x174c <qtm_calibrate_sensor_node+0x54>
    1732:	90 58       	subi	r25, 0x80	; 128
    1734:	92 30       	cpi	r25, 0x02	; 2
    1736:	80 f4       	brcc	.+32     	; 0x1758 <qtm_calibrate_sensor_node+0x60>
    1738:	85 e0       	ldi	r24, 0x05	; 5
    173a:	86 9f       	mul	r24, r22
    173c:	d0 01       	movw	r26, r0
    173e:	87 9f       	mul	r24, r23
    1740:	b0 0d       	add	r27, r0
    1742:	11 24       	eor	r1, r1
    1744:	ae 0f       	add	r26, r30
    1746:	bf 1f       	adc	r27, r31
    1748:	87 e6       	ldi	r24, 0x67	; 103
    174a:	95 e0       	ldi	r25, 0x05	; 5
    174c:	13 96       	adiw	r26, 0x03	; 3
    174e:	8d 93       	st	X+, r24
    1750:	9c 93       	st	X, r25
    1752:	14 97       	sbiw	r26, 0x04	; 4
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	01 c0       	rjmp	.+2      	; 0x175a <qtm_calibrate_sensor_node+0x62>
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	95 e0       	ldi	r25, 0x05	; 5
    175c:	96 9f       	mul	r25, r22
    175e:	90 01       	movw	r18, r0
    1760:	97 9f       	mul	r25, r23
    1762:	30 0d       	add	r19, r0
    1764:	11 24       	eor	r1, r1
    1766:	e2 0f       	add	r30, r18
    1768:	f3 1f       	adc	r31, r19
    176a:	90 81       	ld	r25, Z
    176c:	92 60       	ori	r25, 0x02	; 2
    176e:	90 83       	st	Z, r25
    1770:	08 95       	ret
    1772:	8b e0       	ldi	r24, 0x0B	; 11
    1774:	08 95       	ret
    1776:	82 e0       	ldi	r24, 0x02	; 2
    1778:	08 95       	ret

0000177a <qtm_t161x_ptc_handler_eoc>:
    177a:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    177e:	40 91 10 06 	lds	r20, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
    1782:	50 91 11 06 	lds	r21, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
    1786:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <current_measure_channel>
    178a:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <current_measure_channel+0x1>
    178e:	9c 01       	movw	r18, r24
    1790:	22 0f       	add	r18, r18
    1792:	33 1f       	adc	r19, r19
    1794:	e0 91 5f 38 	lds	r30, 0x385F	; 0x80385f <qtm_raw_data_measurements_ptr>
    1798:	f0 91 60 38 	lds	r31, 0x3860	; 0x803860 <qtm_raw_data_measurements_ptr+0x1>
    179c:	e2 0f       	add	r30, r18
    179e:	f3 1f       	adc	r31, r19
    17a0:	40 83       	st	Z, r20
    17a2:	51 83       	std	Z+1, r21	; 0x01
    17a4:	01 96       	adiw	r24, 0x01	; 1
    17a6:	80 93 3b 38 	sts	0x383B, r24	; 0x80383b <current_measure_channel>
    17aa:	90 93 3c 38 	sts	0x383C, r25	; 0x80383c <current_measure_channel+0x1>
    17ae:	0e 94 69 08 	call	0x10d2	; 0x10d2 <select_next_channel_to_measure>
    17b2:	81 11       	cpse	r24, r1
    17b4:	09 c0       	rjmp	.+18     	; 0x17c8 <qtm_t161x_ptc_handler_eoc+0x4e>
    17b6:	84 e0       	ldi	r24, 0x04	; 4
    17b8:	80 93 3a 38 	sts	0x383A, r24	; 0x80383a <touch_seq_lib_state>
    17bc:	80 91 3b 38 	lds	r24, 0x383B	; 0x80383b <current_measure_channel>
    17c0:	90 91 3c 38 	lds	r25, 0x383C	; 0x80383c <current_measure_channel+0x1>
    17c4:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <qtm_measure_node>
    17c8:	e0 91 38 38 	lds	r30, 0x3838	; 0x803838 <ptc_seq_measure_complete_pointer>
    17cc:	f0 91 39 38 	lds	r31, 0x3839	; 0x803839 <ptc_seq_measure_complete_pointer+0x1>
    17d0:	09 94       	ijmp

000017d2 <__divmodhi4>:
    17d2:	97 fb       	bst	r25, 7
    17d4:	07 2e       	mov	r0, r23
    17d6:	16 f4       	brtc	.+4      	; 0x17dc <__divmodhi4+0xa>
    17d8:	00 94       	com	r0
    17da:	07 d0       	rcall	.+14     	; 0x17ea <__divmodhi4_neg1>
    17dc:	77 fd       	sbrc	r23, 7
    17de:	09 d0       	rcall	.+18     	; 0x17f2 <__divmodhi4_neg2>
    17e0:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <__udivmodhi4>
    17e4:	07 fc       	sbrc	r0, 7
    17e6:	05 d0       	rcall	.+10     	; 0x17f2 <__divmodhi4_neg2>
    17e8:	3e f4       	brtc	.+14     	; 0x17f8 <__divmodhi4_exit>

000017ea <__divmodhi4_neg1>:
    17ea:	90 95       	com	r25
    17ec:	81 95       	neg	r24
    17ee:	9f 4f       	sbci	r25, 0xFF	; 255
    17f0:	08 95       	ret

000017f2 <__divmodhi4_neg2>:
    17f2:	70 95       	com	r23
    17f4:	61 95       	neg	r22
    17f6:	7f 4f       	sbci	r23, 0xFF	; 255

000017f8 <__divmodhi4_exit>:
    17f8:	08 95       	ret

000017fa <__udivmodhi4>:
    17fa:	aa 1b       	sub	r26, r26
    17fc:	bb 1b       	sub	r27, r27
    17fe:	51 e1       	ldi	r21, 0x11	; 17
    1800:	07 c0       	rjmp	.+14     	; 0x1810 <__udivmodhi4_ep>

00001802 <__udivmodhi4_loop>:
    1802:	aa 1f       	adc	r26, r26
    1804:	bb 1f       	adc	r27, r27
    1806:	a6 17       	cp	r26, r22
    1808:	b7 07       	cpc	r27, r23
    180a:	10 f0       	brcs	.+4      	; 0x1810 <__udivmodhi4_ep>
    180c:	a6 1b       	sub	r26, r22
    180e:	b7 0b       	sbc	r27, r23

00001810 <__udivmodhi4_ep>:
    1810:	88 1f       	adc	r24, r24
    1812:	99 1f       	adc	r25, r25
    1814:	5a 95       	dec	r21
    1816:	a9 f7       	brne	.-22     	; 0x1802 <__udivmodhi4_loop>
    1818:	80 95       	com	r24
    181a:	90 95       	com	r25
    181c:	bc 01       	movw	r22, r24
    181e:	cd 01       	movw	r24, r26
    1820:	08 95       	ret

00001822 <do_rand>:
    1822:	8f 92       	push	r8
    1824:	9f 92       	push	r9
    1826:	af 92       	push	r10
    1828:	bf 92       	push	r11
    182a:	cf 92       	push	r12
    182c:	df 92       	push	r13
    182e:	ef 92       	push	r14
    1830:	ff 92       	push	r15
    1832:	cf 93       	push	r28
    1834:	df 93       	push	r29
    1836:	ec 01       	movw	r28, r24
    1838:	68 81       	ld	r22, Y
    183a:	79 81       	ldd	r23, Y+1	; 0x01
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	9b 81       	ldd	r25, Y+3	; 0x03
    1840:	61 15       	cp	r22, r1
    1842:	71 05       	cpc	r23, r1
    1844:	81 05       	cpc	r24, r1
    1846:	91 05       	cpc	r25, r1
    1848:	21 f4       	brne	.+8      	; 0x1852 <do_rand+0x30>
    184a:	64 e2       	ldi	r22, 0x24	; 36
    184c:	79 ed       	ldi	r23, 0xD9	; 217
    184e:	8b e5       	ldi	r24, 0x5B	; 91
    1850:	97 e0       	ldi	r25, 0x07	; 7
    1852:	2d e1       	ldi	r18, 0x1D	; 29
    1854:	33 ef       	ldi	r19, 0xF3	; 243
    1856:	41 e0       	ldi	r20, 0x01	; 1
    1858:	50 e0       	ldi	r21, 0x00	; 0
    185a:	0e 94 6d 0c 	call	0x18da	; 0x18da <__divmodsi4>
    185e:	49 01       	movw	r8, r18
    1860:	5a 01       	movw	r10, r20
    1862:	9b 01       	movw	r18, r22
    1864:	ac 01       	movw	r20, r24
    1866:	a7 ea       	ldi	r26, 0xA7	; 167
    1868:	b1 e4       	ldi	r27, 0x41	; 65
    186a:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__muluhisi3>
    186e:	6b 01       	movw	r12, r22
    1870:	7c 01       	movw	r14, r24
    1872:	ac ee       	ldi	r26, 0xEC	; 236
    1874:	b4 ef       	ldi	r27, 0xF4	; 244
    1876:	a5 01       	movw	r20, r10
    1878:	94 01       	movw	r18, r8
    187a:	0e 94 9a 0c 	call	0x1934	; 0x1934 <__mulohisi3>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	8c 0d       	add	r24, r12
    1884:	9d 1d       	adc	r25, r13
    1886:	ae 1d       	adc	r26, r14
    1888:	bf 1d       	adc	r27, r15
    188a:	b7 ff       	sbrs	r27, 7
    188c:	03 c0       	rjmp	.+6      	; 0x1894 <do_rand+0x72>
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	a1 09       	sbc	r26, r1
    1892:	b0 48       	sbci	r27, 0x80	; 128
    1894:	88 83       	st	Y, r24
    1896:	99 83       	std	Y+1, r25	; 0x01
    1898:	aa 83       	std	Y+2, r26	; 0x02
    189a:	bb 83       	std	Y+3, r27	; 0x03
    189c:	9f 77       	andi	r25, 0x7F	; 127
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	ff 90       	pop	r15
    18a4:	ef 90       	pop	r14
    18a6:	df 90       	pop	r13
    18a8:	cf 90       	pop	r12
    18aa:	bf 90       	pop	r11
    18ac:	af 90       	pop	r10
    18ae:	9f 90       	pop	r9
    18b0:	8f 90       	pop	r8
    18b2:	08 95       	ret

000018b4 <rand_r>:
    18b4:	0e 94 11 0c 	call	0x1822	; 0x1822 <do_rand>
    18b8:	08 95       	ret

000018ba <rand>:
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	98 e3       	ldi	r25, 0x38	; 56
    18be:	0e 94 11 0c 	call	0x1822	; 0x1822 <do_rand>
    18c2:	08 95       	ret

000018c4 <srand>:
    18c4:	a0 e0       	ldi	r26, 0x00	; 0
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <__data_start>
    18cc:	90 93 01 38 	sts	0x3801, r25	; 0x803801 <__data_start+0x1>
    18d0:	a0 93 02 38 	sts	0x3802, r26	; 0x803802 <__data_start+0x2>
    18d4:	b0 93 03 38 	sts	0x3803, r27	; 0x803803 <__data_start+0x3>
    18d8:	08 95       	ret

000018da <__divmodsi4>:
    18da:	05 2e       	mov	r0, r21
    18dc:	97 fb       	bst	r25, 7
    18de:	1e f4       	brtc	.+6      	; 0x18e6 <__divmodsi4+0xc>
    18e0:	00 94       	com	r0
    18e2:	0e 94 84 0c 	call	0x1908	; 0x1908 <__negsi2>
    18e6:	57 fd       	sbrc	r21, 7
    18e8:	07 d0       	rcall	.+14     	; 0x18f8 <__divmodsi4_neg2>
    18ea:	0e 94 9f 0c 	call	0x193e	; 0x193e <__udivmodsi4>
    18ee:	07 fc       	sbrc	r0, 7
    18f0:	03 d0       	rcall	.+6      	; 0x18f8 <__divmodsi4_neg2>
    18f2:	4e f4       	brtc	.+18     	; 0x1906 <__divmodsi4_exit>
    18f4:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <__negsi2>

000018f8 <__divmodsi4_neg2>:
    18f8:	50 95       	com	r21
    18fa:	40 95       	com	r20
    18fc:	30 95       	com	r19
    18fe:	21 95       	neg	r18
    1900:	3f 4f       	sbci	r19, 0xFF	; 255
    1902:	4f 4f       	sbci	r20, 0xFF	; 255
    1904:	5f 4f       	sbci	r21, 0xFF	; 255

00001906 <__divmodsi4_exit>:
    1906:	08 95       	ret

00001908 <__negsi2>:
    1908:	90 95       	com	r25
    190a:	80 95       	com	r24
    190c:	70 95       	com	r23
    190e:	61 95       	neg	r22
    1910:	7f 4f       	sbci	r23, 0xFF	; 255
    1912:	8f 4f       	sbci	r24, 0xFF	; 255
    1914:	9f 4f       	sbci	r25, 0xFF	; 255
    1916:	08 95       	ret

00001918 <__muluhisi3>:
    1918:	0e 94 c1 0c 	call	0x1982	; 0x1982 <__umulhisi3>
    191c:	a5 9f       	mul	r26, r21
    191e:	90 0d       	add	r25, r0
    1920:	b4 9f       	mul	r27, r20
    1922:	90 0d       	add	r25, r0
    1924:	a4 9f       	mul	r26, r20
    1926:	80 0d       	add	r24, r0
    1928:	91 1d       	adc	r25, r1
    192a:	11 24       	eor	r1, r1
    192c:	08 95       	ret

0000192e <__mulshisi3>:
    192e:	b7 ff       	sbrs	r27, 7
    1930:	0c 94 8c 0c 	jmp	0x1918	; 0x1918 <__muluhisi3>

00001934 <__mulohisi3>:
    1934:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__muluhisi3>
    1938:	82 1b       	sub	r24, r18
    193a:	93 0b       	sbc	r25, r19
    193c:	08 95       	ret

0000193e <__udivmodsi4>:
    193e:	a1 e2       	ldi	r26, 0x21	; 33
    1940:	1a 2e       	mov	r1, r26
    1942:	aa 1b       	sub	r26, r26
    1944:	bb 1b       	sub	r27, r27
    1946:	fd 01       	movw	r30, r26
    1948:	0d c0       	rjmp	.+26     	; 0x1964 <__udivmodsi4_ep>

0000194a <__udivmodsi4_loop>:
    194a:	aa 1f       	adc	r26, r26
    194c:	bb 1f       	adc	r27, r27
    194e:	ee 1f       	adc	r30, r30
    1950:	ff 1f       	adc	r31, r31
    1952:	a2 17       	cp	r26, r18
    1954:	b3 07       	cpc	r27, r19
    1956:	e4 07       	cpc	r30, r20
    1958:	f5 07       	cpc	r31, r21
    195a:	20 f0       	brcs	.+8      	; 0x1964 <__udivmodsi4_ep>
    195c:	a2 1b       	sub	r26, r18
    195e:	b3 0b       	sbc	r27, r19
    1960:	e4 0b       	sbc	r30, r20
    1962:	f5 0b       	sbc	r31, r21

00001964 <__udivmodsi4_ep>:
    1964:	66 1f       	adc	r22, r22
    1966:	77 1f       	adc	r23, r23
    1968:	88 1f       	adc	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	1a 94       	dec	r1
    196e:	69 f7       	brne	.-38     	; 0x194a <__udivmodsi4_loop>
    1970:	60 95       	com	r22
    1972:	70 95       	com	r23
    1974:	80 95       	com	r24
    1976:	90 95       	com	r25
    1978:	9b 01       	movw	r18, r22
    197a:	ac 01       	movw	r20, r24
    197c:	bd 01       	movw	r22, r26
    197e:	cf 01       	movw	r24, r30
    1980:	08 95       	ret

00001982 <__umulhisi3>:
    1982:	a2 9f       	mul	r26, r18
    1984:	b0 01       	movw	r22, r0
    1986:	b3 9f       	mul	r27, r19
    1988:	c0 01       	movw	r24, r0
    198a:	a3 9f       	mul	r26, r19
    198c:	70 0d       	add	r23, r0
    198e:	81 1d       	adc	r24, r1
    1990:	11 24       	eor	r1, r1
    1992:	91 1d       	adc	r25, r1
    1994:	b2 9f       	mul	r27, r18
    1996:	70 0d       	add	r23, r0
    1998:	81 1d       	adc	r24, r1
    199a:	11 24       	eor	r1, r1
    199c:	91 1d       	adc	r25, r1
    199e:	08 95       	ret

000019a0 <_exit>:
    19a0:	f8 94       	cli

000019a2 <__stop_program>:
    19a2:	ff cf       	rjmp	.-2      	; 0x19a2 <__stop_program>
